; OM File Header - Saved 2017/04/27 15:01:26
; (6.120003 :patc (om-make-point 118 60) (om-make-point 0 0) (om-make-point 805 763) "" 183 0 nil "2017/04/27 15:00:17")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../../../../Musikk/MIDIFILER/ligeti-5.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "ligeti 5" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 323 90) (quote "Attempt to extract streams from Ligeti's \"Désordre\".  $$Much room for improvement here!  Could probably$obtain better results by separating black and white$first") nil (om-make-point 360 282) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 315 30) (quote "Attempt to extract streams from Ligeti's \"Désordre\":") nil (om-make-point 94 53) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 420 30) (quote "Select a limited region (data size) to avoid time and memory explosion!") nil (om-make-point 270 241) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 264 185) (om-make-point 48 32) 6300 "6300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 215 186) (om-make-point 27 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 152 101) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5100 6300 5900 7100) (5400 6400) (5600 6500) (5100 6300 5900 7100) (5600 6200) (5800 6400) (6100 6700) (6300 7100) (5400 6600 6000 7200) (5600 6200) (5800 6400) (5100 6300 5900 7100) (5600 6200) (5800 6500) (6100 6700) (6800 7100) (5600 6800 6200 7400) (5800 6400) (6300 6700) (6800 6900) (7000 7100) (5600 6800 6000 7200) (5800 6200) (6100 6500) (5100 6300 5700 6900) (5600 5900) (5800 6000) (6100 6200) (6300 6400) (6600 6700) (6800 6900) (7500 5700 6900) (5900 5400 6600) (5800 6000) (6100 5700 6900) (6000 5400 6600) (5600 6200) (6100 6700) (6600 6900) (6800 6200 7400) (6400 5600 6800) (5800 6500) (6600 6000 7200) (6200 5400 6600) (6100 6700) (6300 7100) (6600 7200) (6800 6400 7600) (6900 4600 5800) (4900 7100) (5400 7600) (6100 7700) (6300 6200 7400) (6700 4600 5800) (4900 6900) (5400 5500 6700) (5700 4900 6100) (5100 5900) (5400 6200) (5600 6500) (5800 6700) (6300 6900) (6800 6200 7400) (7000 6400) (6500 5400 6600) (5600 6200 7400) (5800 6400) (6500 5400 6600) (6100 7100) (6300 7200) (6800 6500 7700) (7500 6900) (7100 5600 6800) (5800 6400 7600) (6100 6500) (6700 5600 6800) (5800 7100) (6600 7200) (6800 6700 7900) (7000 6900) (7100 5100 6300) (5400 7200) (5600 7400) (6300 6500 7700) (6800 6700) (6900 4900 6100) (5100 5700 6900) (5400 5900) (6000 4200 5400) (4400 5900 7100) (4600 6000) (6200 4400 5600) (4900 6400) (5100 6400 7600) (5600 6500) (6100 6700) (6900 5100 6300) (5800 7100) (6100 6200 7400) (6800 6400) (7000 6500) (6900 8100 4900 6100) (5400 7100) (5600 7600) (6700 7900 5800 7000) (6100 6900) (6300 7100) (7200 5600 6800) (6100 7400) (6300 6000 7200) (7000 6200) (7500 6700) (6000 7200 5400 6600) (5600 6200) (5800 6400) (6700 4900 6100) (5100 7200) (5400 6200 7400) (5600 6400) (5800 6500) (6000 7200 5100 6300) (5400 6200) (5600 6400) (6700 4400 5600) (5100 6400 7600) (5400 6700) (5800 6900) (6100 7200) (7400 4600 5800) (4900 6200 7400) (5100 6400) (5400 6900) (5600 5900 7100) (6400 4400 5600) (4900 6700) (5100 6900) (7100 3900 5100) (4200 7200) (4400 7700) (4900 7900) (5400 5900 7100) (5600 6200) (5800 6400) (6600 5900 7100) (6400 4600 5800) (5400 6500) (5600 6900) (7100 4600 5800) (4900 6400 7600) (5100 6500) (5800 6700) (6100 6200 7400) (6400 4900 6100) (5100 6500) (5400 6700) (4600 5800 6500 7700) (4900 6900) (5100 7100) (5400 7200) (5800 7700) (5100 6300 6400 7600) (5400 6900) (5600 7200) (6300 5700 6900) (6600 6000) (6200 5100 6300) (5400 6500) (5600 7100) (7200 4600 5800) (5400 7600) (5600 8100) (5800 6400 7600) (6100 6500) (6300 6700) (6600 6400 7600) (6800 6500) (6900 4900 6100) (5100 7100) (5600 7600) (4900 6100 6700 7900) (5400 6900) (6100 7100) (6300 6500 7700) (6600 6900) (7100 5100 6300) (5800 7200) (6100 6900 8100) (7100 4900 6100) (5100 7200) (5600 7400) (5800 7600) (6600 6700 7900) (6900 4200 5400) (4600 7100) (4900 5900 7100) (5100 6000) (5800 6400) (6000 7200 4200 5400) (4400 6200) (4600 6400) (6700 4400 5600) (4600 7100) (4900 6500 7700) (5100 6700) (5400 7100) (5600 7600) (5800 7700) (6100 6400 7600) (6900 4900 6100) (5400 7100) (5600 7100 8300) (7200 4900 6100) (5100 7400) (5400 6900 8100) (5800 7100) (6300 7200) (7400 5100 6300) (5400 6200 7400) (5600 6400) (6500 5100 6300) (5400 6200 7400) (5800 6400) (6100 6500) (6600 7100) (7200 4600 5800) (5400 6400 7600) (5600 6700) (5800 7200) (6100 6200 7400) (6400 4400 5600) (4600 6500) (5400 6700) (6900 3700 4900) (4200 6500 7700) (4900 6700) (6900 3900 5100) (4600 7400) (5100 7700) (5400 6400 7600) (5600 6500) (6700 4600 5800) (4900 6000 7200) (5100 6200) (5400 6700) (5800 6900) (7200 4400 5600) (5100 7700) (5600 7900) (5400 6600 6000 7200) (5600 6200) (6300 6400) (5100 6300 6000 7200) (5800 6200) (6300 6500) (7000 6700) (7300 6900) (4900 6100 6500 7700) (5100 6900) (5400 7100) (4400 5600 6400 7600) (4600 6700) (5400 6900) (5800 7100) (6300 7200) (4600 5800 6700 7900) (5100 6900) (5400 7400) (7600 3900 5100) (4400 7700) (4900 6500 7700) (5400 6700) (5600 6900) (5900 7100 4200 5400) (4600 6200) (4900 6400) (5400 6500) (5600 6700) (6900 3900 5100) (4200 7400) (4600 6500 7700) (6700 3400 4600) (3900 7100) (4200 6500 7700) (4900 6700) (5100 6900) (5400 7200) (6100 7400) (6300 6900 8100) (7400 4200 5400) (4400 7600) (4600 6700 7900) (6900 4200 5400) (4400 7100) (4600 7200) (4900 7400) (5100 7100 8300) (7400 4400 5600) (4600 7600) (5100 7900) (8100 4200 5400) (4600 6900 8100) (4900 7100) (5100 7200) (5400 6000 7200) (6200 4600 5800) (4900 6500) (5600 6200 7400) (6100 6400) (6300 6500) (6700 4600 5800) (4900 6700 7900) (5100 6900) (7100 4200 5400) (4400 7400) (4600 7700) (5400 6500 7700) (5600 6700) (5800 6900) (6100 7200 8400) (6300 7400) (7700 4400 5600) (4900 7100 8300) (5100 7200) (7400 4400 5600) (5100 7600) (5400 7900) (6100 6400 7600) (6300 6500) (6700 4600 5800) (5100 6400 7600) (5400 6700) (7200 4400 5600) (4600 7400) (4900 7700) (5600 6500 7700) (5800 6900) (7100 3700 4900) (4200 6400 7600) (4400 6700) (4900 6900) (5100 7100) (6700 7900 3700 4900) (4400 7200) (7600 3900 5100) (4200 7700) (4400 7900) (4600 6500 7700) (5400 6700) (5600 6200 7400) (6100 6700) (6900 4400 5600) (4900 7100) (5100 7200) (7700 4400 5600) (4600 8100) (4900 6200 7400) (5100 6400) (6200 7400 4600 5800) (4900 6400) (5400 6500) (6700 4600 5800) (5400 6700 7900) (5600 7100) (5800 6500 7700) (7100 4200 5400) (4900 7200) (5100 7400) (5600 6900 8100) (7100 3900 5100) (4200 7400) (7600 3200 4400) (3400 6700 7900) (6900 3400 4600) (3700 6000 7200) (3900 6200) (4200 6400) (6500 4200 5400) (4600 7100) (4900 6700 7900) (5400 6900) (6700 7900 3900 5100) (4200 6900) (7400 4900 6100) (5100 7100 8300) (7600 4600 5800) (4900 6900 8100) (5100 7100) (7400 4400 5600) (4900 7200 8400) (7400 3900 5100) (4200 7600) (4400 7100 8300) (6200 7400 4200 5400) (6400 7600 3400 4600) (3700 6500) (4400 6900) (6900 8100 3700 4900) (4200 7100) (4400 7200) (6700 7900 3400 4600) (7400 8600 3000 4200) (3400 7200 8400) (3700 7600) (3900 7700) (6500 7700 3700 4900) (6500 7700 3700 4900) (3900 7100) (4200 6700 7900) (6500 7700 3900 5100) (6700 3700 4900) (3900 6900 8100) (7200 4200 5400) (4600 6700 7900) (6400 7600 4200 5400) (6500 3700 4900) (4400 6900) (4600 6400 7600) (6400 7600 3900 5100) (6700 3900 5100) (4200 6900 8100) (6700 7900 4200 5400) (6900 3900 5100) (4200 7100 8300) (7200 3200 4400) (3700 6900 8100) (6200 7400 3200 4400) (6500 3400 4600) (3700 7100) (4200 6900 8100) (6900 8100 3900 5100) (7200 3900 5100) (4200 7200 8400) (7100 8300 4200 5400) (7200 4200 5400) (4600 7400 8600) (7600 3700 4900) (3900 7200 8400) (6400 7600 3400 4600) (6500 7700 2700 3900) (6700 3000 4200) (3200 7100 8300) (7400 3700 4900) (3900 6900 8100) (7600 8800 3400 4600) (7400 8600 4400 5600) (7600 4200 5400) (4600 6700 7900) (6700 7900 3900 5100) (7100 3400 4600) (3700 6900 8100) (6700 7900 3700 4900) (6900 3000 4200) (3200 7100 8300) (7200 3200 4400) (3400 6900 8100) (6500 7700 3000 4200) (6900 2500 3700) (2700 7100) (3000 6500 7700) (6500 7700 3200 4400) (7100 3200 4400) (3400 7100 8300) (3700 6900 8100) (7200 3400 4600) (3200 4400 7200 8400) (3400 7400) (3700 4900 7100 8300) (3900 6400 7600) (6900 3700 4900) (7200 3200 4400) (3400 7100 8300) (4200 7100 8300) (7200 3400 4600) (3400 4600 7400 8600) (3700 7200 8400) (7400 3700 4900) (3400 4600 7600 8800) (3700 7700) (2700 3900 7400 8600) (3200 6500 7700) (6700 7900 2700 3900) (6900 3000 4200) (3200 7200 8400) (3400 7400) (7100 8300 3400 4600) (7700 8900 3400 4600) (3700 7600 8800) (8100 3700 4900) (3700 4900 6900 8100) (4400 6900 8100) (7100 3200 4400) (3400 7100 8300) (6900 8100 3000 4200) (7100 2200 3400) (2500 3700 7200 8400) (2700 7400) (3200 4400 7100 8300) (3400 6700 7900) (6900 3000 4200) (7100 3900 5100) (3700 4900 6700 7900) (3900 6700 7900) (6900 3400 4600) (3000 4200 7200 8400) (3200 7100 8300) (7200 3200 4400) (2500 3700 7400 8600) (2700 7600) (2700 3900 7200 8400) (3000 6500 7700) (6900 2500 3700) (2000 3200 7200 8400) (2200 7200 8400) (7600 2700 3900) (2700 3900 7600 8800) (3000 7400 8600) (7600 3000 4200) (2700 3900 7700 8900) (3000 8100) (3200 4400 7600 8800) (3400 6700 7900) (6900 8100 3200 4400) (7100 2700 3900) (3200 7400 8600) (7600 3000 4200) (3000 4200 7200 8400) (3200 7900 9100) (7700 8900 3200 4400) (7900 3000 4200) (3400 7100 8300) (7100 8300 2200 3400) (2500 7400) (7200 8400 2200 3400) (7100 8300 2500 3700) (3200 7200) (7400 8600 3000 4200) (7900 3000 4200) (3400 7200 8400) (6900 8100 3200 4400) (7100 3200 4400) (3400 6900 8100) (6900 8100 2700 3900) (3200 7100) (7400 8600 2500 3700) (7200 8400 1800 3000) (7600 2000 3200) (2200 7600 8800) (7700 2700 3900) (3000 7400 8600) (6700 7900 2500 3700) (6900 3400 4600) (3200 4400 7400 8600) (3700 7400 8600) (7600 3000 4200) (2500 3700 7700 8900) (2700 7600 8800) (7700 2700 3900) (2000 3200 7900 9100) (2200 8300) (2200 3400 7700 8900) (2500 6900 8100) (7100 8300 2000 3200) (7200 1500 2700) (1800 7600 8800) (8100 2200 3400) (2200 3400 7400 8600) (2500 8100 9300) (7900 9100 2500 3700) (8100 2200 3400) (2500 7200 8400) (7200 8400 2700 3900) (3400 7600) (7400 8600 2700 3900) (7200 8400 2200 3400) (3000 7400) (7600 8800 2500 3700) (7700 2500 3700) (2700 7400 8600) (7100 8300 2700 3900) (7200 2500 3700) (2700 7100 8300) (7100 8300 1800 3000) (2200 7200) (7600 8800 1800 3000) (7400 8600 2000 3200) (2500 7900) (7700 8900 2500 3700) (7600 8800 2500 3700) (3000 6900 8100) (7100 2700 3900) (2700 3900 7600 8800) (3000 7600 8800) (7700 2200 3400) (3000 7900 9100) (7700 8900 2000 3200) (7900 1300 2500) (1500 2700 8100 9300) (1800 8400) (2200 3400 7900 9100) (2000 3200 7100 8300) (3000 4200 7200 8400) (2700 3900 7700 8900) (3200 8100) (2500 3700 7600 8800) (2000 3200 8300 9500) (2200 3400 8100 9300) (1500 2700 7400 8600) (1800 3000 7400 8600) (7600 1500 2700) (1000 2200 7600 8800) (1300 7400 8600) (7700 8900 1800 3000) (7600 8800 1800 3000) (7200 8400 2000 3200) (7400 1800 3000) (2200 3400 7200 8400) (2200 3400 7200 8400) (1800 3000 7700 8900) (2000 7600 8800) (7900 9100 2000 3200) (7700 8900 2000 3200) (7100 8300 2200 3400) (7200 2000 3200) (1300 2500 7700 8900) (1300 2500 7700 8900) (1500 2700 8100 9300) (2000 7900 9100) (8300 9500 2000 3200) (8100 9300 2000 3200) (7200 8400 2200 3400) (7400 8600 2200 3400) (7900 9100 1800 3000) (7700 8900 1500 2700) (8400 9600 800 2000) (8300 9500 1000 2200) (7600 8800 6600 7800) (6800 7700) (7000 7900) (7800 8300 8800) (8000 7700) (7900 7000 7500) (6600 8100) (6800 8600) (7500 8500 8100 8900) (7500 7900) (7800 8100) (8000 8200 7700 8800) (7800 7700) (8200 8100) (9000 8400) (9200 8600) (7300 8000 8800 9100) (7000 8100) (7300 8300) (8400 7300 7500) (7000 8900) (7300 8300 8900) (7500 7900) (7800 8400) (8400 8600 7300 7800) (6800 7600) (7300 7700) (7900 6100 7000) (6100 8100) (6800 8300) (7000 8400) (7500 8800) (6600 7300 8400 8600) (6300 7700) (7000 8100) (7500 7700 8600) (7800 7600) (8100 6300 7000) (6100 8400) (6800 8600) (5600 6600 8800 9100) (5600 8100) (6100 8300) (6600 8300 8900) (6800 7900) (7000 8300) (7300 8400) (7500 8600) (8800 9300 6800 7300) (6300 8300) (6600 8400) (8600 7000 7300) (6300 8800) (6800 8100 9100) (7000 8300) (7300 8400) (7400 8400 7000 7500) (6600 7400) (7000 7600) (7700 7000 7300) (6600 8100) (7000 8400) (7300 8600) (7800 9100) (6800 7800 8400 9100) (6800 8300) (7000 8400) (7800 8600 9100) (8000 8100) (8400 7000 7800) (6800 8600) (7000 8800) (6600 7300 9300 9500) (6300 8400) (6800 8600) (7000 8900 9300) (7300 8400) (7500 8800) (7800 9100) (8000 9300) (8800 9600 6600 7500) (6600 8800) (6800 8900) (9100 7000 7500) (6600 9300) (6800 8800 9500) (7000 8400) (7300 8600) (8100 8600 7500 7800) (7000 7600) (7800 7700) (7900 8800 7000 7500) (7000 7700) (7300 7900) (7500 8300) (7800 8400) (8300 9300 6100 6800) (5800 8400) (6100 8600) (6300 8800) (6600 8900) (8800 9100 6600 6800) (6100 8100) (6300 8400) (9300 9600 9800 6100 7000) (6100 8800) (6600 8900) (6800 8600 8800 9600) (7300 8800) (7500 9300) (8000 9600) (8700 9800) (8800 8600 8900 7300 7500) (6600 7900) (6800 8100) (8400 8300 8900 6800 7500) (7000 7900) (7300 8100) (7800 8400) (8200 8600) (8300 8400 9100 6800 7800) (6800 8100) (7300 8300) (8600 7900 8900 7300 7800) (7300 7900) (7800 8400) (8200 8600) (9000 8900) (8400 9100 9300 6600 7300) (6300 8300) (6600 8600) (6800 8800) (7300 8900) (8400 8800 9100 6600 7000) (6100 8100) (6300 8400) (8600 7700 8800 5400 6300) (5400 7900) (5600 8100) (8400 6300 6600) (6100 8900) (6300 9100) (6600 9300) (6800 9600) (6800 6600 7300 7700 8300 8800) (6300 7700) (6600 7900) (6800 8600 8300 8800) (7000 7700) (7800 8100) (8300 6800 6100 7000) (6100 8400) (6300 8900 8400 9300) (8400 7300 7500 8000) (7000 8800) (7800 8600 8400 9100) (8100 6800 7500 7800) (6800 8400) (7000 8600) (7300 8800) (7500 8800 8600 9300 9500) (8600 7300 6800 7500) (6800 8900) (7300 9300) (9500 6100 6600 7000) (6100 8600 8900 8300 9300) (6800 8300) (7300 8800) (8000 8400 8300 8100 8600) (7600 6600 7000 7300) (6300 7700) (6600 7900) (8400 6100 5600 6600) (5600 8600) (5800 8900) (6100 9100) (6600 8800 8300 8400 9300) (7000 8400) (8600 6600 5800 6800) (6300 8300 8900 8600 9300) (6800 8300) (7500 8400) (7800 8600) (8900 5800 6100 6600) (5600 9100 8800 9500 9600) (5800 8600) (9100 5600 5800 6100) (5100 8400 9300 9100 9500) (5800 8400) (6100 8600) (6300 8800) (6800 9100) (7000 9600 9100 8900 9800) (7500 8800) (8900 6100 5800 6800) (5800 9100) (6100 9300) (5800 6100 6800 9100 8600 9300 9600) (5800 8600) (6100 8800) (6800 7900 7900 8100 8800) (7300 7700) (7500 7900) (8300 8400 8600 8900 6800 6600 7000) (6100 7900) (6300 8100) (8300 6600 5800 6800) (6100 8600) (6300 8800 9300 8400 9500) (6600 8400) (6800 8600) (8800 6600 6800 7300) (6600 9300) (7300 8800 9100 8900 9300) (7500 8300) (7800 8800) (9500 9100 8900 10000 6800 6600 7300) (6600 9300) (7000 9500) (9500 9600 9100 9800 6600 5800 6800) (5800 8800) (6100 8900) (6300 9100) (6600 9500) (7300 8600 8100 8300 9100) (7500 8300) (8000 8400) (8200 8800 8300 8100 9100) (8100 6800 6600 7000) (6300 8300) (6600 8800) (8900 6100 6300 7000) (6600 8800 8600 9100 9300) (7000 8400) (7300 8900) (7500 8300 8900 8100 9100) (8100 6800 7000 7300) (6300 8300) (7000 8600) (8900 6100 6300 7000) (6100 8400 9100 8800 9500) (6300 8600) (6800 8800) (7300 9300) (9500 5400 6100 6300) (5800 8800 9100 8900 9300) (6300 8300) (6800 8400) (7300 8600 8300 8100 8900) (7500 7900) (8400 5800 5600 6300) (5400 8600) (5800 8800) (9100 6100 6300 6600) (5600 9300) (5800 9600) (6100 8100 7900 8400 8900) (6800 7900) (7000 8100) (7800 7900 8800 8300 8900) (8200 7900) (8100 6300 6100 7000) (6100 8600) (6300 8800) (6100 6300 7000 8800 9100 8900 9500) (6100 8400) (6300 8800) (6600 8300 9100 8400 9300) (6800 8300) (8400 7000 6800 7300) (6300 8600) (7000 8800) (6300 6800 7300 9300 8800 9500 9600) (6600 8800) (7000 8900) (7500 9300) (7800 9500) (8200 8800 8900 8800 9500) (8400 6600 6100 6800) (6300 8600) (6800 7700 8400 7900 8800) (7000 7700) (7500 7900) (8100 5600 6300 6600) (5600 8300) (6100 8400) (8900 5100 5400 5800) (4900 9100) (5100 9300 8900 9300 9500) (8400 5600 5400 6100) (5100 8600) (5800 8400 8900 8600 9500) (6300 8800) (6800 8900) (9300 5800 6600 6800) (5800 9600) (6100 8900 9500 9100 9800) (6600 8800) (6800 8900) (7000 8600 9300 9100 9600) (8600 5600 5800 6600) (5600 8800) (5800 9100) (9300 7300 7000 7500) (6600 9500 9800 9300 10000) (6800 9100) (9500 6600 6300 7300) (6600 9600) (6800 9800) (7000 8800 9100 8900 9800) (7300 8800) (9100 6800 6600 7000) (6600 8600 8800 8600 8900) (6800 8100) (8300 5600 5800 6600) (5600 8400 8900 8600 9100) (6100 8100) (6300 8600) (6600 8800) (8900 6300 6600 6800) (5800 9500 8600 8800 9600) (6600 8800) (8900 5800 5600 6100) (5100 9100) (5600 9300) (5800 8400 9100 8800 9500) (6300 8400) (6800 8600) (9300 9600 9300 10100 5600 5400 6300) (5400 9100) (5600 9300) (6300 9800 9600 9300 10000) (6600 9300) (9500 5100 5600 6100) (5100 9600) (5400 9800) (4900 5400 5600 9100 8800 8300 9300) (4900 8300) (5100 8400) (5400 8400 8300 8600 9300) (5600 8300) (5800 8400) (6100 8600) (6600 8800) (6800 9100 9100 8900 9500) (8400 6100 5400 6300) (5800 8600) (6100 8400 8600 9100 9300) (8300 5800 5600 6300) (5400 8400) (5600 8900) (6300 9300) (6800 9500 8600 9100 9600) (7000 8600) (7300 8800) (8900 5800 6300 6600) (6100 9300) (6300 8800 8900 9100 9500) (8400 5400 5800 6300) (5400 8800) (5800 8600 8300 8100 9100) (6100 8300) (6300 8400) (6600 8600) (7000 9100) (7300 9300) (9500 6300 5800 6800) (6100 9800) (6300 8400 8300 8100 9100) (6600 8100) (6800 8400) (7000 8600 8800 8900 9100) (7300 8100) (8000 8300) (8200 8400) (8800 6600 6100 6800) (5800 8800 9500 8900 9600) (6300 8600) (8900 5600 6100 6300) (5600 8900 8400 9100 9500) (5800 8400) (6100 8600) (6300 8900) (6800 9100) (7000 8800 8900 9600 9800) (7300 8800) (7500 8900) (7800 9100) (8000 9300) (8500 9500 9300 8900 9600) (8700 8600) (9100 5600 6100 6600) (5600 8100 7900 8600 8900) (5800 7900) (8300 6300 5800 6600) (5600 8600) (5800 8800) (6600 8900) (6800 9500) (7000 9600) (7300 8800 9100 8900 9600) (7500 8600) (7800 9100) (8000 8900 8600 9500 9600) (8500 8600) (8800 6300 5800 6800) (6100 9100) (6800 9300) (5600 6100 6600 9100 9500 9600 10000) (5800 8900) (6300 9500) (6600 8800 9500 9300 9800) (7000 8800) (7800 9100) (8000 9300) (8200 9500) (8700 9600 9500 10000 10100) (9400 9300) (9700 9500) (9900 9600) (10200 9800) (10400 9800 9100 9600 10000) (10600 8900) (10900 9500) (11600 8800) (11800 8900) (12600 9300) (8800) (9300))) :lonset (quoteldur (quote ((298 298 298 298) (90 90) (90 90) (498 498 498 498) (89 89) (89 89) (89 89) (89 89) (298 298 298 298) (89 89) (89 89) (498 498 498 498) (89 89) (89 89) (89 89) (89 89) (498 498 498 498) (89 89) (89 89) (89 89) (89 89) (298 298 298 298) (89 89) (89 89) (797 797 697 697) (90 90) (90 90) (90 90) (90 90) (90 90) (90 90) (90 300 300) (90 300 300) (90 90) (90 500 500) (90 500 500) (90 90) (90 90) (90 90) (90 300 300) (90 300 300) (90 90) (90 500 500) (90 500 500) (90 90) (90 90) (90 90) (90 500 500) (90 500 500) (90 90) (90 90) (90 90) (90 300 300) (90 300 300) (90 90) (90 700 700) (90 800 800) (90 90) (90 90) (90 90) (90 90) (90 90) (90 300 300) (90 90) (90 300 300) (90 500 500) (90 90) (90 500 500) (90 90) (90 90) (90 300 300) (90 90) (90 300 300) (90 500 500) (90 90) (90 500 500) (90 90) (90 90) (90 500 500) (90 90) (90 500 500) (90 90) (90 90) (90 300 300) (90 90) (90 300 300) (90 300 300) (90 90) (90 300 300) (90 400 400) (90 90) (90 500 500) (90 90) (90 500 500) (90 90) (90 90) (90 500 500) (90 90) (90 300 300) (90 90) (90 90) (298 298 298 298) (90 90) (90 90) (498 498 298 298) (90 90) (90 90) (90 500 500) (90 90) (90 300 300) (90 90) (90 90) (498 498 298 298) (90 90) (90 90) (90 500 500) (90 90) (90 300 300) (90 90) (90 90) (398 398 298 298) (90 90) (90 90) (90 500 500) (90 500 500) (90 90) (90 90) (90 90) (90 500 500) (90 300 300) (90 90) (90 90) (90 800 800) (90 300 300) (90 90) (90 90) (90 800 800) (90 90) (90 90) (90 90) (90 300 300) (90 90) (90 90) (90 500 500) (90 300 300) (90 90) (90 90) (90 500 500) (90 300 300) (90 90) (90 90) (90 400 400) (90 300 300) (90 90) (90 90) (498 498 498 498) (90 90) (90 90) (90 90) (90 90) (498 498 298 298) (89 89) (89 89) (89 800 800) (89 89) (89 300 300) (89 89) (89 89) (89 800 800) (89 89) (89 89) (89 300 300) (89 89) (89 89) (89 500 500) (89 89) (89 300 300) (89 89) (89 89) (498 498 298 298) (89 89) (89 89) (89 400 400) (89 89) (89 300 300) (89 89) (89 500 500) (89 500 500) (89 89) (89 89) (89 89) (89 300 300) (89 500 500) (89 89) (89 300 300) (89 89) (89 89) (498 498 298 298) (89 89) (89 89) (89 800 800) (89 89) (89 500 500) (89 89) (89 89) (89 89) (89 89) (89 300 300) (89 300 300) (89 89) (89 300 300) (89 500 500) (89 89) (89 400 400) (89 89) (89 89) (89 300 300) (89 300 300) (89 89) (89 500 500) (89 500 500) (89 89) (89 89) (89 89) (89 500 500) (89 300 300) (89 89) (89 89) (89 500 500) (89 300 300) (89 89) (89 89) (89 300 300) (89 500 500) (89 89) (89 500 500) (89 89) (89 89) (89 300 300) (89 89) (89 500 500) (89 700 700) (89 89) (89 89) (89 89) (89 300 300) (89 89) (89 89) (298 298 298 298) (89 89) (89 89) (498 498 498 498) (89 89) (89 89) (89 89) (89 89) (297 297 297 297) (90 90) (90 90) (498 498 498 498) (90 90) (90 90) (90 90) (90 90) (298 298 498 498) (90 90) (90 90) (90 500 500) (90 90) (90 300 300) (90 90) (90 90) (698 698 498 498) (90 90) (90 90) (90 90) (90 90) (90 300 300) (90 90) (90 300 300) (90 800 800) (90 90) (90 500 500) (90 90) (90 90) (90 90) (90 90) (90 300 300) (90 300 300) (90 90) (90 500 500) (90 500 500) (90 90) (90 90) (90 90) (90 500 500) (90 300 300) (90 90) (90 90) (90 500 500) (90 300 300) (90 90) (90 90) (90 300 300) (90 500 500) (90 90) (90 400 400) (90 90) (90 90) (90 300 300) (90 500 500) (90 90) (90 800 800) (90 90) (90 90) (90 300 300) (90 90) (90 90) (90 300 300) (90 90) (90 300 300) (90 500 500) (90 90) (90 500 500) (90 90) (90 90) (90 300 300) (90 90) (90 300 300) (90 500 500) (90 90) (90 500 500) (90 90) (90 90) (90 300 300) (90 90) (90 500 500) (90 400 400) (90 90) (90 90) (90 90) (498 498 198 198) (90 90) (90 700 700) (90 90) (90 90) (90 200 200) (90 90) (90 700 700) (90 90) (90 300 300) (90 90) (90 90) (90 400 400) (90 90) (90 200 200) (90 90) (398 398 298 298) (90 90) (90 90) (90 400 400) (90 200 200) (90 90) (90 400 400) (90 400 400) (90 90) (90 90) (90 400 400) (90 200 200) (90 90) (90 200 200) (90 200 200) (90 400 400) (90 500 500) (90 90) (90 90) (90 400 400) (90 90) (90 200 200) (90 90) (298 298 198 198) (90 90) (90 200 200) (90 200 200) (90 300 300) (90 300 300) (90 90) (90 200 200) (90 300 300) (90 300 300) (90 90) (90 100 100) (98 98 98 98) (298 298 298 298) (89 89) (89 89) (298 298 298 298) (89 89) (89 89) (98 98 98 98) (98 98 398 398) (89 300 300) (89 89) (89 89) (98 98 98 98) (197 197 297 297) (90 90) (90 100 100) (198 198 98 98) (90 200 200) (90 200 200) (90 200 200) (90 100 100) (298 298 98 98) (90 300 300) (90 90) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 200 200) (90 200 200) (90 100 100) (298 298 98 98) (90 300 300) (90 90) (90 100 100) (198 198 98 98) (89 200 200) (89 100 100) (198 198 98 98) (89 200 200) (89 200 200) (89 200 200) (89 100 100) (98 98 98 98) (198 198 98 98) (89 200 200) (89 200 200) (89 200 200) (89 100 100) (98 98 98 98) (197 197 97 97) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 200 200) (90 200 200) (90 100 100) (298 298 98 98) (90 300 300) (90 90) (90 100 100) (198 198 98 98) (90 300 300) (90 100 100) (90 200 200) (90 100 100) (198 198 198 198) (90 90) (198 198 98 98) (90 300 300) (90 100 100) (90 300 300) (90 100 100) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 198 198) (89 89) (198 198 98 98) (89 100 100) (198 198 98 98) (89 300 300) (89 200 200) (89 89) (98 98 98 98) (98 98 198 198) (89 200 200) (89 100 100) (197 197 97 97) (90 200 200) (90 200 200) (90 100 100) (198 198 98 98) (90 100 100) (198 198 198 198) (90 90) (198 198 98 98) (90 300 300) (90 100 100) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 198 198) (89 89) (198 198 98 98) (89 200 200) (89 100 100) (198 198 98 98) (89 200 200) (89 100 100) (198 198 98 98) (89 200 200) (89 100 100) (198 198 198 198) (89 89) (197 197 97 97) (90 100 100) (198 198 98 98) (90 200 200) (90 200 200) (90 100 100) (198 198 98 98) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 198 198) (90 90) (98 98 98 98) (198 198 198 198) (90 90) (198 198 98 98) (89 200 200) (89 100 100) (198 198 98 98) (89 200 200) (89 100 100) (198 198 198 198) (89 89) (98 98 98 98) (198 198 98 98) (89 200 200) (89 200 200) (89 200 200) (89 100 100) (197 197 97 97) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 100 100) (198 198 198 198) (90 90) (198 198 98 98) (90 100 100) (198 198 98 98) (90 200 200) (90 200 200) (90 100 100) (198 198 98 98) (90 100 100) (198 198 98 98) (89 200 200) (89 100 100) (198 198 198 198) (89 89) (98 98 98 98) (198 198 198 198) (89 89) (198 198 98 98) (89 200 200) (89 100 100) (197 197 97 97) (90 200 200) (90 100 100) (198 198 198 198) (90 90) (98 98 98 98) (198 198 198 198) (90 90) (98 98 98 98) (98 98 198 198) (90 200 200) (90 100 100) (198 198 98 98) (90 200 200) (90 200 200) (90 100 100) (198 198 98 98) (89 100 100) (198 198 198 198) (89 89) (98 98 98 98) (98 98 98 98) (98 98 98 98) (197 197 197 197) (90 90) (98 98 98 98) (98 98 98 98) (98 98 98 98) (98 98 98 98) (98 98 198 198) (90 100 100) (198 198 98 98) (90 100 100) (98 98 98 98) (98 98 98 98) (198 198 98 98) (89 100 100) (98 98 98 98) (98 98 98 98) (197 197 97 97) (90 100 100) (98 98 98 98) (98 98 98 98) (198 198 98 98) (90 100 100) (98 98 98 98) (98 98 98 98) (198 198 98 98) (90 100 100) (98 98 98 98) (98 98 98 98) (98 98 98 98) (98 98 98 98) (98 98 98 98) (97 97 97 97) (98 98 98 98) (98 98 98 98) (298 298 498 498) (90 90) (90 90) (90 490 500) (90 90) (90 290 300) (90 90) (90 90) (288 298 288 298) (90 90) (90 90) (488 498 488 498) (90 90) (90 90) (90 90) (90 90) (288 298 488 498) (90 90) (90 90) (90 490 500) (90 90) (90 290 300) (90 90) (90 90) (787 798 287 298) (89 89) (89 89) (89 489 500) (89 89) (89 89) (89 89) (89 89) (487 498 287 298) (89 89) (89 89) (89 489 500) (89 89) (89 289 300) (89 89) (89 89) (787 798 287 298) (89 89) (89 89) (89 489 500) (89 89) (89 89) (89 89) (89 89) (487 498 287 298) (89 89) (89 89) (89 489 500) (89 89) (89 289 300) (89 89) (89 89) (787 798 287 298) (89 89) (89 89) (89 489 500) (89 89) (89 89) (89 89) (89 89) (487 497 287 297) (90 90) (90 90) (90 490 500) (90 90) (90 290 300) (90 90) (90 90) (788 798 288 298) (90 90) (90 90) (90 490 500) (90 90) (90 90) (90 90) (90 90) (488 498 288 298) (90 90) (90 90) (90 490 500) (90 90) (90 290 300) (90 90) (90 90) (288 298 288 298) (90 90) (90 90) (488 498 488 498) (90 90) (90 90) (90 90) (90 90) (488 498 488 498) (90 90) (90 90) (90 90) (90 90) (288 298 288 298) (90 90) (90 90) (288 288 298 788 798) (90 90) (90 90) (90 490 490 500) (90 90) (90 90) (90 90) (90 90) (287 287 298 287 298) (89 89) (89 89) (487 487 498 487 498) (89 89) (89 89) (89 89) (89 89) (287 287 298 287 298) (89 89) (89 89) (487 487 498 487 498) (89 89) (89 89) (89 89) (89 89) (487 487 498 487 498) (89 89) (89 89) (89 89) (89 89) (287 287 297 287 297) (90 90) (90 90) (788 788 798 288 298) (90 90) (90 90) (90 490 500) (90 90) (90 90) (90 90) (90 90) (588 588 598 288 288 298) (90 90) (90 90) (90 490 490 500) (90 90) (90 90) (90 290 290 300) (90 90) (90 290 290 300) (90 290 290 300) (90 90) (90 490 490 500) (90 490 490 500) (90 90) (90 90) (90 90) (90 490 490 490 500) (90 290 290 300) (90 90) (90 90) (90 490 490 500) (90 290 290 290 300) (90 90) (90 90) (90 790 790 790 800) (90 290 290 300) (90 90) (90 90) (90 590 590 600) (90 90) (90 90) (90 90) (90 290 290 290 300) (90 90) (90 490 490 500) (90 490 490 490 500) (90 90) (90 90) (90 90) (90 290 290 300) (90 290 290 290 300) (90 90) (90 790 790 800) (90 490 490 490 500) (90 90) (90 90) (90 90) (90 90) (90 490 490 490 500) (90 90) (90 290 290 300) (90 90) (90 90) (588 588 598 288 288 288 298) (90 90) (90 90) (90 290 290 290 300) (90 90) (90 90) (488 488 488 498 288 288 298) (90 90) (90 90) (90 490 490 500) (90 90) (90 490 490 490 500) (90 90) (90 90) (90 490 490 500) (90 90) (90 290 290 290 300) (90 90) (90 90) (288 288 288 298 288 288 298) (90 90) (90 90) (487 487 487 498 887 887 898) (89 89) (89 89) (89 89) (89 89) (89 289 289 289 300) (89 89) (89 89) (89 489 489 489 500) (89 289 289 300) (89 89) (89 89) (89 489 489 500) (89 289 289 289 300) (89 89) (89 89) (89 489 489 489 500) (89 289 289 300) (89 89) (89 89) (89 489 489 500) (89 489 489 489 500) (89 89) (89 89) (89 89) (89 589 589 600) (89 289 289 289 300) (89 89) (89 89) (89 789 789 789 800) (89 89) (89 289 289 300) (89 89) (89 89) (89 789 789 800) (89 89) (89 89) (89 289 289 289 300) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 289 289 300) (89 89) (89 89) (487 487 498 287 287 287 298) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 289 289 300) (89 89) (89 89) (587 587 598 487 487 487 498) (89 89) (89 89) (89 89) (89 89) (89 289 289 289 300) (89 489 489 500) (89 89) (89 789 789 789 800) (89 89) (89 89) (89 289 289 300) (89 89) (89 89) (89 289 289 300) (89 89) (89 289 289 289 300) (89 489 489 500) (89 89) (89 489 489 489 500) (89 89) (89 89) (89 589 589 600) (89 89) (89 289 289 289 300) (89 89) (89 89) (89 489 489 489 500) (89 289 289 300) (89 89) (89 89) (89 289 289 300) (89 489 489 489 500) (89 89) (89 489 489 500) (89 89) (89 89) (89 289 289 289 300) (89 89) (89 289 289 300) (89 289 289 289 300) (89 89) (89 489 489 500) (89 489 489 489 500) (89 89) (89 89) (89 89) (89 289 289 300) (89 489 489 489 500) (89 89) (89 589 589 600) (89 89) (89 89) (89 289 289 289 300) (89 89) (89 89) (287 287 287 298 487 487 498) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 289 289 300) (89 89) (89 89) (887 887 898 287 287 287 298) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 89) (89 89) (89 89) (89 289 289 289 300) (89 289 289 300) (89 89) (89 489 489 489 500) (89 689 689 700) (89 89) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 89) (89 289 289 300) (89 89) (89 289 289 289 300) (89 789 789 800) (89 89) (89 789 789 789 800) (89 89) (89 89) (89 89) (89 89) (89 89) (89 889 889 900) (89 89) (89 289 289 289 300) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 89) (89 89) (89 289 289 300) (89 289 289 289 300) (89 89) (89 1289 1289 1300) (89 489 489 489 500) (89 89) (89 89) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 89) (89 89) (89 89) (89 289 289 289 300) (89 89) (89 289 289 300) (89 789 789 789 800) (89 89) (89 1089 1089 1100) (89 89) (89 89) (89 89) (89 89) (89 89) (89 289 289 289 300) (89 89) (89 89) (89 489 489 489 500) (89 89) (89 289 289 300) (89 89) (89 89) (2087 2087 2097 287 287 287 297) (90 90) (90 90) (90 490 490 490 500) (90 90) (90 90) (90 90) (90 90) (90 490 490 490 500) (90 90) (90 90) (90 90) (90 90) (90 290 290 290 300) (90 90) (90 90) (90 90) (90 90) (90 90) (90) (90))) :lvel (quote ((88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 63) (88 88 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (88 88 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (63 63) (63 63) (63 88 88) (63 63) (63 88 88) (63 63) (88 88 88 88) (63 63) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (63 63) (63 88 88) (63 88 88) (63 88 88) (63 63) (63 88 88) (88 88 88 88) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (63 63) (63 63) (88 88 88 88) (88 88 88 88) (63 88 88) (63 63) (63 63) (88 88 88 88) (88 88 88 88) (63 63) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 63) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 63) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 63) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 63) (88 88 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (63 63) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (63 88 88) (63 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 63) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (88 88 88 88) (63 63) (63 63) (63 64 88) (63 63) (63 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (63 63) (63 63) (64 88 64 88) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 63) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (64 64 88 64 88) (63 63) (63 63) (63 64 88) (63 63) (63 63) (63 63) (63 63) (64 64 88 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 88) (63 64 64 88) (63 63) (63 64 64 88) (63 64 64 88) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (64 64 88 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (64 64 64 88 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (64 64 64 88 64 64 88) (63 63) (63 63) (64 64 64 88 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (64 64 88 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (64 64 88 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (64 64 64 88 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (64 64 88 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 64 88) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 63) (63 64 64 88) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 64 64 88) (63 63) (63 63) (64 64 88 64 64 64 88) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 64 64 64 88) (63 63) (63 63) (63 63) (63 63) (63 63) (63) (63))) :loffset (quote ((0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0))) :lchan (quote ((3 3 1 1) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 2) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 2) (4 2) (4 1 1) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 2) (2 3 3) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 1 1) (4 2) (4 2) (4 2) (1 1 3 3) (4 2) (2 3 3) (4 2) (4 2) (4 1 1) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 1 1) (4 2) (4 1 1) (2 3 3) (4 2) (4 2) (4 1 1) (2 3 3) (4 2) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (1 1 3 3) (4 2) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (4 2) (2 3 3) (4 1 1) (2 3 3) (4 2) (4 1 1) (1 1 3 3) (1 1 3 3) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (1 1 3 3) (1 1 3 3) (4 1 1) (4 2) (4 2) (1 1 3 3) (1 1 3 3) (4 2) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 2) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 2) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 2) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (4 1 1) (2 3 3) (2 3 3) (4 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (4 2) (1 1 3 3) (1 1 3 3) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (4 1 1) (2 3 3) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (4 2) (1 1 3 3) (1 1 3 3) (4 2) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (4 2) (1 1 3 3) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (4 2) (1 1 3 3) (1 1 3 3) (4 2) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (4 1 1) (1 1 3 3) (4 2) (1 1 3 3) (1 1 3 3) (4 2) (1 1 3 3) (1 1 3 3) (4 1 1) (2 3 3) (3 3 1 1) (4 1 1) (2 3 3) (4 1 1) (1 1 3 3) (2 3 3) (3 3 1 1) (4 2) (3 3 1 1) (3 3 1 1) (3 3 1 1) (3 3 1 1) (4 2) (3 3 1 1) (3 3 1 1) (3 3 1 1) (3 3 1 1) (3 3 1 1) (2 3 3) (3 3 1 1) (4 1 1) (1 1 3 3) (1 1 3 3) (1 1 3 3) (2 3 3) (3 3 1 1) (3 3 1 1) (3 3 1 1) (4 1 1) (1 1 3 3) (1 1 3 3) (1 1 3 3) (2 3 3) (3 3 1 1) (3 3 1 1) (3 3 1 1) (4 1 1) (1 1 3 3) (1 1 3 3) (1 1 3 3) (1 1 3 3) (1 1 3 3) (1 1 3 3) (1 1 3 3) (1 1 3 3) (1 1 3 3) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 1 1) (4 2) (4 2) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 2) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 1 1) (4 2) (2 3 3) (4 2) (4 2) (3 3 1 1) (4 2) (4 2) (4 1 1) (4 2) (4 2) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 1 1) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (4 2) (4 2) (1 1 3 3) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (4 1 1 1) (4 2) (4 2) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (1 1 1 3 3) (4 2) (4 2) (2 3 3) (4 2) (4 2) (4 2) (4 2) (3 3 3 1 1 1) (4 2) (4 2) (4 1 1 1) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1) (2 3 3 3) (4 2) (4 1 1 1) (2 3 3 3) (4 2) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (3 3 3 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (1 1 1 1 3 3 3) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (1 1 1 1 3 3 3) (4 2) (4 2) (1 1 1 1 3 3 3) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (3 3 3 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (3 3 3 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (1 1 1 1 3 3 3) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (3 3 3 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1 1) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 2) (2 3 3 3) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (2 3 3 3) (4 2) (4 2) (3 3 3 1 1 1 1) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 1 1 1 1) (4 2) (4 2) (4 2) (4 2) (4 2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" (quote n)) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 6500))) (om-make-point 200 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 280 288) (om-make-point 48 32) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 94 402) (om-make-point 401 316) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (7100) (7200) (7100) (6900) (6900) (6900) (6800) (6800) (6800) (6800) (6600) (6900) (7100) (7600) (7700) (4900) (5400) (6100))) :lonset (quote (0 298 796 1094 2388 3085 3385 1592 2090 3885 3985 4285 4785 4885 4985 5085 5385 5485 5585 6385)) :ldur (quote ((298) (498) (298) (498) (697) (300) (500) (498) (298) (90) (300) (500) (90) (90) (90) (90) (90) (90) (800))) :lvel (quote ((88) (88) (88) (88) (88) (88) (88) (88) (88) (63) (88) (88) (63) (63) (63) (63) (63) (63) (88))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (3) (3) (4) (3) (3) (2) (2) (2) (2) (4) (4) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5600) (5800) (5100) (6300) (6400) (6700) (6900) (6200) (6000) (6400) (6300) (5900) (5900) (6000) (5900) (5700) (5700) (5700) (5600) (5600))) :lonset (quote (5785 5885 5985 5685 6085 6285 5285 5385 3885 4185 4685 5185 0 298 796 1094 2388 3085 3385 1592 2090 6375)) :ldur (quote ((90) (90) (90) (90) (90) (90) (90) (90) (300) (500) (500) (90) (298) (498) (298) (498) (697) (300) (500) (498) (298))) :lvel (quote ((63) (63) (63) (63) (63) (63) (63) (63) (88) (88) (88) (63) (88) (88) (88) (88) (88) (88) (88) (88) (88))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (2) (2) (2) (1) (1) (1) (4) (1) (1) (1) (1) (1) (1) (1) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4900) (5400) (6700) (6800) (6200) (6100) (7000) (6200) (6100) (6300) (6600) (6300) (6200) (6000) (6300) (6600) (6600) (6400) (6600) (6300) (6300) (6500) (6600))) :lonset (quote (4885 4985 5485 6185 5185 5085 6285 4285 4385 4485 4585 1094 1592 2090 2388 3185 3485 3985 796 0 298 4085 4185 6375)) :ldur (quote ((90) (90) (700) (90) (300) (90) (90) (90) (90) (90) (90) (498) (498) (298) (797) (300) (500) (90) (298) (298) (498) (90) (90))) :lvel (quote ((63) (63) (88) (63) (88) (63) (63) (63) (63) (63) (63) (88) (88) (88) (88) (88) (88) (63) (88) (88) (88) (63) (63))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (1) (4) (1) (4) (4) (2) (4) (4) (4) (3) (1) (1) (3) (3) (3) (2) (3) (3) (3) (2) (4))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (6300) (5600) (5800) (5400) (5600) (6200) (6400) (6700) (6800) (6500) (6200) (6900) (7000) (6400) (6300) (6200) (6100) (6200) (6300) (5900) (5800) (6700) (6800) (7400) (7200) (6800) (6900) (6200) (6100) (6000) (6100) (6000) (4600) (4600) (4900))) :lonset (quote (596 696 396 496 98 198 894 994 1392 1492 1292 1192 1890 1990 1690 1790 2188 2288 2685 2785 2485 2585 2885 2985 3885 4185 4685 3785 3585 3685 3285 3385 3485 4785 5285 5585 6385)) :ldur (quote ((89) (89) (89) (89) (90) (90) (89) (89) (89) (89) (89) (89) (89) (89) (89) (89) (89) (89) (90) (90) (90) (90) (90) (90) (300) (500) (90) (90) (90) (90) (90) (90) (90) (500) (300) (800))) :lvel (quote ((63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (88) (88) (63) (63) (63) (63) (63) (63) (63) (88) (88) (88))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (2) (2) (2) (4) (2) (2) (2) (4) (2) (4) (2) (4) (2) (4) (2) (4) (2) (4) (1) (1) (4) (2) (2) (4) (2) (4) (2) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5600) (5800) (6100) (7100) (5600) (5800) (6700) (6800) (7100) (5800) (5800) (6500) (6400) (6600) (6000) (6100) (5600) (6900) (7500) (5900) (5800) (6200) (6400) (6700) (7100) (6400) (6500) (6700) (6600) (5600) (5800) (7100) (7200) (6700) (5500) (6200) (7600) (7400))) :lonset (quote (1192 1292 1392 1492 894 994 1790 1890 1990 1690 2188 2288 2785 2885 2585 2685 2485 2985 3085 3185 3285 396 496 596 696 98 198 3685 3785 3585 4085 4485 4585 4385 5485 6185 4685 5185 6485)) :ldur (quote ((89) (89) (89) (89) (89) (89) (89) (89) (89) (89) (89) (89) (90) (90) (90) (90) (90) (90) (90) (90) (90) (89) (89) (89) (89) (90) (90) (90) (90) (90) (90) (90) (90) (90) (700) (300) (500) (300))) :lvel (quote ((63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (63) (88) (88) (88) (88))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (2) (4) (4) (2) (4) (2) (4) (4) (2) (2) (4) (2) (4) (4) (2) (4) (2) (4) (2) (2) (2) (2) (2) (2) (2) (4) (4) (4) (2) (2) (2) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5400) (5400) (5600) (5400) (5100) (5800) (5800) (5700) (7400) (7200) (5100) (5100) (5400) (5100) (5900) (6200) (6500) (6700) (6900) (7400))) :lonset (quote (3185 3485 3985 4285 2388 4785 5285 5585 1592 2090 0 298 796 1094 5685 5785 5885 5985 6085 6185 6485)) :ldur (quote ((300) (500) (300) (500) (797) (500) (300) (90) (498) (298) (298) (498) (298) (498) (90) (90) (90) (90) (90) (300))) :lvel (quote ((88) (88) (88) (88) (88) (88) (88) (63) (88) (88) (88) (88) (88) (88) (63) (63) (63) (63) (63) (88))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (2) (1) (1) (3) (3) (3) (3) (2) (2) (2) (2) (2) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1183 780) 0 1000 nil 231/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CS-SEGREGATE-STREAMS" (quote cs-segregate-streams) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "CS" nil) (om-load-inputfun (quote input-funbox) "time-weight (1)" "TIME-WEIGHT" 1) (om-load-inputfun (quote input-funbox) "pitch-weight (1)" "PITCH-WEIGHT" 1))) (om-make-point 230 325) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ligeti-5.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 67 102) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "andersvi" "Musikk" "MIDIFILER")) :device nil :host nil :name "ligeti-5" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "ligeti-5.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player outport)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :midi-player) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (9 0 8 1 nil 0) (6 0 9 0 nil 0) (7 0 9 1 nil 0))) nil 6.120003))
