; OM File Header - Saved 2017/04/27 15:01:26
; (6.120003 :patc (om-make-point 10 10) (om-make-point 0 0) (om-make-point 1177 609) "" 183 0 nil "2017/04/27 15:00:17")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../../../../Musikk/MIDIFILER/BACH/bach/invent/invent13.mid\""))
(in-package :om)(load-lib-for (quote ("streamsep")))(setf *om-current-persistent* (om-load-patch1 "stream segregation - invention no. 13" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 330 81) (om-make-point 55 32) 15652 "15652" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 112 127) (om-make-point 145 77) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4500) (6400) (5700 6900) (7200) (7100) (6400) (5600 7100) (7400) (5700 7200) (5200) (5700 7600) (6000) (5900 6800) (5200) (5900 7600) (6200) (6000 6900) (6400) (5700 6900) (7200) (5600 7100) (6400) (5200 7100) (7400) (5700 7200) (5200) (5700 6900) (6000) (5900) (5200) (5900) (6200) (6000) (7600) (5700 7200) (7600) (6000 6900) (7200) (5700 6400) (6700) (6200 6500) (5700) (5300 6900) (5700) (5000 7400) (5300) (4500 7700) (4800) (4700) (7400) (5000 7100) (7400) (5500 6700) (7100) (5900 6200) (6500) (6400) (5500) (5200 6700) (5500) (4800 7200) (5200) (4300 7600) (4700) (4500) (7200) (4800 6900) (7200) (5000 6500) (5300) (4700 7400) (5000) (4300) (7100) (4700 6700) (7100) (4800 6400) (5200) (4500 7200) (4800) (4100) (6900) (3800 6500) (6900) (4300 6200) (5500) (5300 7100) (5500) (4800 7200) (5500) (6000) (6400) (6200) (5500) (6200) (6500) (6400) (6700) (6000 7200) (7600) (5900 7400) (6700) (5500 7400) (7700) (6000 7600) (5500) (6000 7900) (6400) (6200 7100) (5500) (6200 7900) (6500) (6400 7200) (6700) (6000 7200) (7600) (7400) (6700) (7400) (7700) (7600) (6700) (6400 7200) (6700) (6000 7900) (6400) (5500 7600) (5900) (5700 8400) (8100) (6000 7600) (8100) (6400 7200) (7600) (6700 6900) (7200) (6600 7400) (6900) (6200 7800) (6600) (5700 8100) (6200) (5400 8400) (5700) (5500 8300) (7900) (5900 7400) (7900) (6200 7100) (7400) (6600 6700) (7100) (6400 7200) (6700) (6000 7600) (6400) (5500 7900) (6000) (5200 8300) (5500) (5400 8100) (7800) (5700 7500) (7800) (5900 7100) (7500) (6300 6600) (6900) (6700) (6400) (6000 7900) (6400) (5700) (6000 7600) (6400 7200) (6700 7600) (6600 6900) (6200) (5900 7800) (6200) (5500) (5900 7400) (6200 7100) (6600 7400) (6400 6700) (6000) (5700 7600) (6000) (5400) (5700 7200) (6000 6900) (7200) (6600) (5900 7900) (6000 7800) (5700 7600) (5900 7500) (7800) (4700 7100) (7500) (5200 7600) (6400) (5900) (5500) (5200) (4700) (4300) (4700) (4000) (7900) (5200 8200) (7900) (5500 7600) (7900) (5800 7300) (7600) (4900 7900) (7600) (7300) (7600) (6900) (6700) (6600) (6400) (6200) (7700) (5000 8100) (7700) (5300 7400) (7700) (5600 7100) (7400) (4700 7700) (7400) (7100) (7400) (6700) (6500) (6400) (6200) (6000) (7600) (4800 7900) (7600) (5200 7200) (7600) (5400 6900) (7200) (4500 7500) (7200) (6900) (7200) (6600) (6400) (6300) (6100) (5900) (7400) (4700 7700) (7400) (5000 7100) (7400) (5300 6800) (7100) (4400 7400) (7100) (6800) (7100) (6400) (6200) (6000) (5900) (6000) (6400) (5700 6900) (7200) (5600 7100) (6400) (5200 7100) (7400) (5700 7200) (5200) (5700 6900) (6000) (5900 6800) (5200) (5900 6400) (6200) (6000 6900) (6400 7200) (6900 7600) (6400 7200) (6000 6900) (6400 7200) (5700 6600) (6000 6900) (5400 7200) (5700 6900) (6000 6600) (5700 6900) (5400 6300) (5700 7200) (5100 7100) (5400 6900) (5200 6800) (7100) (5600 7400) (7100) (5900 6800) (7100) (5600 6200) (6500) (5200 6800) (6500) (4700 6200) (6500) (4400 5900) (6500) (4000 6400) (6200) (4500 6000) (6400) (4800 6900) (6400) (5200 6000) (6400) (4800 5700) (6000) (4500 6300) (6000) (4800 5700) (6000) (3900 5400) (6000) (5900) (5700) (5600) (5900) (5600 7100) (5200) (5000 6800) (5900) (5600 6400) (5000) (4800) (6400) (5200 6900) (7200) (4400 7100) (6400) (5200 7100) (7400) (4500 7200) (6900) (5400 7200) (7600) (4700 7400) (7100) (5600 7400) (7700) (4800 7600) (7200) (5700 7600) (7900) (5000 7700) (7600) (5800 7400) (7200) (5600 7100) (7200) (5300 7400) (7600) (5000 7700) (7400) (4700 8000) (7400) (4400 8300) (7400) (4500 7200) (8100) (3800 7700) (7400) (4000 7100) (7400) (4100 6800) (7100) (3900 7200) (6900) (4000 6400) (6900) (5200 7100) (6800) (4500 6900) (6400) (6000) (6400) (5700))) :lonset (quoteldur (quote ((326) (163) (652 163) (163) (163) (163) (326 163) (163) (163 326) (163) (163 327) (164) (163 326) (163) (163 326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (163 326) (163) (163 326) (163) (163) (163) (163) (163) (326) (163) (327 164) (163) (326 163) (163) (326 163) (163) (163 326) (163) (163 326) (163) (163 326) (163) (163 489) (163) (326) (163) (326 163) (163) (326 163) (163) (489 163) (163) (327) (164) (163 326) (163) (163 326) (163) (163 489) (163) (326) (163) (326 163) (163) (163 326) (163) (163 489) (163) (326) (163) (326 163) (163) (163 326) (163) (163 490) (163) (327) (163) (326 163) (163) (136 326) (163) (163 326) (163) (136 326) (163) (163) (163) (163) (163) (163) (163) (326) (163) (326 163) (163) (326 163) (163) (327 163) (164) (163 326) (163) (163 326) (163) (163 326) (163) (163 326) (163) (326 163) (163) (326 163) (163) (163) (163) (163) (163) (326) (163) (163 326) (163) (163 326) (163) (164 327) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (163 326) (163) (163 326) (163) (163 326) (163) (163 326) (163) (326 163) (163) (326 163) (163) (327 163) (164) (326 163) (163) (163 326) (163) (163 326) (163) (163 326) (163) (163 326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326) (163) (163 490) (163) (164) (163 163) (163 163) (163 163) (163 326) (163) (163 489) (163) (163) (163 163) (163 163) (163 163) (163 326) (163) (163 489) (163) (163) (163 163) (489 163) (163) (163) (163 163) (163 163) (164 164) (326 163) (163) (326 163) (163) (163 326) (163) (163) (163) (163) (163) (163) (163) (326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (164) (163) (163) (163) (163) (163) (326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (163) (163) (163) (163) (163) (163) (327) (164) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (163) (163) (163) (163) (163) (163) (326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (327 164) (163) (163) (163) (163) (163) (163) (163) (326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (163 326) (163) (163 326) (163) (163 326) (163) (163 327) (164) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (163 163) (326 163) (163) (326 163) (163) (326 163) (163) (327 164) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (327 163) (164) (163) (163) (326) (163) (163 326) (163) (163 326) (163) (163 326) (163) (326) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (327 164) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (327 163) (164) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (326 163) (163) (2609 163) (163) (163) (163) (1957))) :lvel (quoteloffset (quote ((0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0))) :lchan (quote ((2) (1) (2 1) (1) (1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (1) (1) (1) (1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (2) (2 1) (2) (2) (2 1) (2 1) (2 1) (2 1) (2) (2 1) (2) (2) (2 1) (2 1) (2 1) (2 1) (2) (2 1) (2) (2) (2 1) (2 1) (1) (1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (1) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (1) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (1) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (1) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 1353 353) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 390 38) (quote "stream segregation - Bach invention #13") "" (om-make-point 314 34) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" nil) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 1))) (om-make-point 286 124) (om-make-point 84 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 377 200) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 334 202) (om-make-point 34 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CS-SEGREGATE-STREAMS" (quote cs-segregate-streams) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "CS" nil) (om-load-inputfun (quote input-funbox) "time-weight (1)" "TIME-WEIGHT" 1) (om-load-inputfun (quote input-funbox) "pitch-weight (1)" "PITCH-WEIGHT" 1))) (om-make-point 274 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "invent13.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 120 44) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "andersvi" "Musikk" "MIDIFILER" "BACH" "bach" "invent")) :device nil :host nil :name "invent13" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "invent13.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems mode grillestep notechancolor? cmnpref obj-mode zoom deltapict winsize winpos player outport)) (list nil (quote t) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (om-make-point 913 443) (om-make-point 0 0) (quote :midi-player) 0)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 90 312) (om-make-point 917 145) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7100) (6700) (7100) (6400) (7200) (6900) (6500) (6900) (6200) (7100) (7200) (6700) (6500) (6400) (6900) (7400) (7100) (7400) (7700) (7400) (6700) (7100) (6900) (7200) (7600) (7200) (7600) (7200) (6900) (7200) (7600) (7200) (6500) (6400) (6200) (6700) (6500) (7200) (7100) (6900) (6400) (6900) (6400) (7400) (7200) (6900) (7100) (7600) (6800) (7400) (7200) (7100) (7600) (6400) (7200) (7100) (6900) (6400))) :lonset (quote (11413 11902 12065 12228 12391 12717 13207 13370 13533 13696 14022 14348 6359 6522 6196 6848 7989 8152 8315 7500 7174 8478 8641 5870 6033 5380 5543 5707 10598 10761 10924 10109 9783 8967 9130 8804 9457 11087 3098 3261 2935 2772 2609 3424 3750 3913 4239 3587 2283 1957 1141 1304 978 1630 815 489 652 326 163 14674)) :ldur (quote ((489) (163) (163) (163) (326) (490) (163) (163) (163) (326) (326) (326) (163) (326) (163) (326) (163) (163) (163) (489) (326) (163) (163) (163) (163) (163) (164) (163) (163) (163) (163) (489) (326) (163) (327) (163) (326) (326) (163) (163) (163) (163) (163) (163) (163) (326) (326) (163) (326) (326) (163) (326) (163) (327) (163) (163) (163) (163) (163))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6200) (6000) (5500) (5500) (6200) (6500) (5500) (5300) (5500) (4800) (5500) (5200) (5500) (5900) (5500) (4800) (4700) (4500) (5000) (4800) (5200) (5000) (5300) (4700) (4800) (4300) (5200) (4700) (5000) (4800) (5000) (4700) (4500) (4300) (5300) (4100) (3800) (4300) (4500) (4800) (5700) (5300) (5700) (6200) (6200) (6000) (5700) (6000) (5700) (5900) (5200) (6200) (6000) (5700) (5600) (5900) (5200) (5700) (5200) (6000) (5900) (5700) (5200) (6000) (5900) (5700) (5200) (5700) (5600) (5700) (4500))) :lonset (quote (14837 15000 14674 14511 15163 15326 15489 13859 14022 14185 14348 9293 9457 9620 8804 8478 7663 7826 7500 8152 9783 9946 7174 7337 12065 12391 11739 12554 11413 11576 10761 11087 10272 10435 10109 11250 13043 13370 13696 12717 12880 6685 6848 7011 6522 5054 5217 5543 5870 6196 4891 4728 2446 2609 2935 3261 2283 3587 3913 4076 4402 4565 4239 2120 1793 1957 1630 1467 326 978 1304 0 15652)) :ldur (quote ((163) (163) (163) (163) (163) (163) (163) (163) (163) (163) (136) (164) (163) (163) (489) (326) (163) (326) (163) (326) (163) (163) (163) (163) (326) (163) (326) (163) (163) (163) (326) (163) (163) (326) (163) (163) (327) (326) (136) (163) (163) (163) (163) (163) (163) (163) (326) (327) (326) (326) (163) (163) (163) (326) (326) (326) (163) (326) (163) (163) (163) (163) (163) (163) (164) (163) (163) (163) (652) (326) (163) (326))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 0 0) (om-make-point 1318 504) 0 1000 nil 51/50 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote f)) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (1 0 3 0 nil 0) (0 0 3 2 nil 0) (3 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (6 0 8 1 nil 0))) nil 6.120003))
