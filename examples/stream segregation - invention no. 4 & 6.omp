; OM File Header - Saved 2017/06/08 17:49:50
; (6.120003 :patc (om-make-point 10 10) (om-make-point 0 0) (om-make-point 1356 670) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../../../../Musikk/MIDIFILER/BACH/bach/invent/invent6.mid\"" "#P\"../../../../../../../Musikk/MIDIFILER/BACH/bach/invent/invent4.mid\""))
(in-package :om)(load-lib-for (quote ("streamsep")))(setf *om-current-persistent* (om-load-patch1 "stream segregation - invention no. 4 & 6." (quote ((let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 803 315) (om-make-point 537 152) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (5900) (6300) (6400) (6300) (5200) (5400) (5600) (5700) (5900) (6100) (6400) (5200) (4400) (4500) (4400) (4200) (4500) (4400) (4700) (5000) (4900) (5100) (5200) (4700) (4500) (4700) (4400) (4200))) :lonset (quote (3333 3542 2500 2917 3125 0 417 833 1250 1667 2083 3750 4167 8542 8646 8750 8125 7292 7708 6875 6042 6458 5625 5208 8958 9062 9167 9375 9479 9583)) :ldur (quote ((209) (208) (417) (208) (208) (417) (416) (417) (417) (416) (417) (417) (416) (104) (104) (208) (417) (416) (417) (417) (416) (417) (417) (417) (104) (105) (208) (104) (104))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (6900) (6800) (6600) (6900) (6800) (7100) (7400) (7300) (7500) (7600) (7100) (6900) (7100) (6800) (6600) (6800) (7300) (7100) (7500) (7600) (7500) (6400) (6300) (6400) (6600) (6800) (6900) (7100) (7300) (7600) (6400))) :lonset (quote (3542 3646 3750 3125 2292 2708 1875 1042 1458 625 208 3958 4062 4167 4375 4479 4583 8333 8542 7500 7917 8125 4792 4896 5000 5417 5833 6250 6667 7083 8750 9167 9583)) :ldur (quote ((104) (104) (208) (417) (416) (417) (417) (416) (417) (417) (417) (104) (105) (208) (104) (104) (209) (209) (208) (417) (208) (208) (104) (104) (417) (416) (417) (417) (416) (417) (417) (416))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote f) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1009 400) (om-make-point 0 0) 0 3 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CS-SEGREGATE-STREAMS" (quote cs-segregate-streams) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "CS" nil) (om-load-inputfun (quote input-funbox) "time-weight (1)" "TIME-WEIGHT" 1) (om-load-inputfun (quote input-funbox) "pitch-weight (1)" "PITCH-WEIGHT" 1))) (om-make-point 1031 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1091 191) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1134 189) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "invent6.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 834 39) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "andersvi" "Musikk" "MIDIFILER" "BACH" "bach" "invent")) :device nil :host nil :name "invent6" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "invent6.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport player winpos winsize deltapict zoom obj-mode cmnpref notechancolor? grillestep mode show-stems scale)) (list 0 (quote :midi-player) (om-make-point 0 0) (om-make-point 913 443) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (quote t) nil)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" nil) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 1))) (om-make-point 1023 126) (om-make-point 84 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 820 117) (om-make-point 186 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5200) (7600) (5400) (7500) (5600) (7400) (5700) (7300) (5900) (7100) (6100) (6900) (6300) (6800) (6400) (6300 6600) (6100) (5900 6800) (6900) (6400 6800) (7100) (6900) (5200 7100) (6800) (6600) (6800) (6400) (6300) (6400) (5200) (6600) (5100) (6800) (5000) (6900) (4900) (7100) (4700) (7300) (4500) (7500) (4400) (7600) (4200 7500) (7300) (4400 7100) (4500) (4400 7600) (4700) (4500) (4700 6400) (4400) (4200) (4400) (4000) (3900) (4000) (8000) (4900) (7600) (5200) (7300) (5400) (7600) (7500) (5800 7600) (7300) (6100 7000) (6600) (3900) (7800) (4700) (7500) (5100) (7100) (5200) (7500) (7300) (5600 7500) (7100) (5900 6800) (6400) (3700) (7600) (4900) (7300) (5200) (7000) (5400) (8000) (5600) (7800) (5800) (7600) (5900) (7500) (5200) (7300) (5600) (7100) (5400 7000) (6100 6400) (6300) (5800 6400) (6100 7000) (6800) (5200 7000) (6100 7100) (7000) (5100 7100) (6300) (5200 6100) (7100) (5400 6100) (7000) (4700 7100) (5900) (5800) (5900) (5400 7100) (5200) (5400 7500) (5100 7800) (4900) (5100 8300) (5400) (5200) (5400) (5100 8300) (4900) (5100 7800) (4700 7500) (4600) (4700 7100) (6600) (6300) (5900) (3500) (5200) (7600) (5400) (7500) (5600) (7400) (5700) (7300) (5900) (7100) (6100) (6900) (6300) (6800) (6400) (6300 6600) (6100) (5900 6800) (6900) (6400 6800) (7100) (6900) (5200 7100) (6800) (6600) (6800) (6400) (6300) (6400) (5200) (6600) (5100) (6800) (5000) (6900) (4900) (7100) (4700) (7300) (4500) (7500) (4400) (7600) (4200 7500) (7300) (4400 7100) (4500) (4400 7600) (4700) (4500) (4700 6400) (4400) (4200) (4400) (4000) (3900) (4000) (8000) (4900) (7600) (5200) (7300) (5400) (7600) (7500) (5800 7600) (7300) (6100 7000) (6600) (3900) (7800) (4700) (7500) (5100) (7100) (5200) (7500) (7300) (5600 7500) (7100) (5900 6800) (6400) (3700) (7600) (4900) (7300) (5200) (7000) (5400) (8000) (5600) (7800) (5800) (7600) (5900) (7500) (5200) (7300) (5600) (7100) (5400 7000) (6100 6400) (6300) (5800 6400) (6100 7000) (6800) (5200 7000) (6100 7100) (7000) (5100 7100) (6300) (5200 6100) (7100) (5400 6100) (7000) (4700 7100) (5900) (5800) (5900) (5400 7100) (5200) (5400 7500) (5100 7800) (4900) (5100 8300) (5400) (5200) (5400) (5100 8300) (4900) (5100 7800) (4700 7500) (4600) (4700 7100) (6600) (6300) (5900) (3500) (5900) (5900) (6100) (5800) (6300) (5700) (6400) (5600) (6600) (5400) (6800) (5200) (7000) (5100) (7100) (4900 7000) (6800) (5100 6600) (5200) (5100 7100) (5400) (5200) (5400 5900) (5100) (4900) (5100) (4700) (4600) (4700) (8300) (4900) (8200) (5100) (8100) (5200) (8000) (5400) (7800) (5600) (7600) (5800) (7500) (5900) (5800 7300) (5600) (5400 7500) (7600) (5900 7500) (7800) (7600) (4700 7800) (7500) (7300) (7500) (7100) (7000) (5600 7100) (7500) (7300) (5900 7500) (8000) (7900) (6300 8000) (7300) (7100) (5500 7300) (7600) (7500) (5800 7600) (8200) (8000) (6300 8200) (7500) (7300) (5600 7500) (8000) (7900) (5900 8000) (8300) (8200) (6300 8300) (7500) (7400) (5100 7500) (8200) (8000) (6300 8200) (7900) (7700) (6100 7900) (7500) (7400) (6000 7400) (8100) (6100) (8000) (6300) (7800) (5600) (7600) (7500) (6100 7600) (7300) (7200) (5900 7300) (7600) (7500) (5800 7600) (8000) (5900) (7800) (6100) (7600) (5400) (7500) (7300) (5900 7500) (7100) (7000) (6300 7100) (7300) (7100) (5500 7300) (7600) (5600) (7500) (5800) (7300) (5100) (7100) (7000) (5600 7100) (6800) (6700) (5900 6800) (6900) (6800) (4900 6900) (7300) (7100) (7300) (6900) (6800) (6100 6900) (7600) (7500) (7600) (6700) (6500) (5800 6700) (7000) (6800) (5500 7000) (5900) (5800) (5600 5900) (6800) (4900 6400) (6100) (5100 5800) (6700) (4400 6800) (6300) (5900) (4400 5600) (5600) (5400) (6400) (5200) (6600) (5100) (6800) (5000) (6900) (4900) (7100) (4700) (7300) (4500) (7500) (4400) (7600) (4200 7500) (7300) (4400 7100) (4500) (4400 7600) (4700) (4500) (4700) (4400 7100) (4200 6900) (4400 7100) (4000 6800) (3900 6600) (4000 6800) (7600) (4200) (7500) (4400) (7400) (4500) (7300) (4700) (7100) (4900) (6900) (5100) (6800) (5200) (5100 6600) (4900) (4700 6800) (6900) (5200 6800) (7100) (6900) (7100) (5900 6800) (5700 6600) (5900 6800) (5600 6400) (5400 6300) (5600 6400) (6100) (6600) (5700) (6900) (5400) (7100) (5700) (5600) (5700 7500) (5400) (5100 7800) (4700) (6300) (5900) (6400) (5600) (6800) (5200) (6900) (5600) (5400) (5600 7300) (5200) (4900 7600) (4500) (6100) (5700) (6600) (5400) (6900) (5100) (7100) (6100) (7300) (5900) (7500) (5700) (7600) (5600) (7300) (5400) (6900) (5200) (5100 7800) (5700) (5600) (5700) (5100) (5000) (5100) (5600) (5400) (5600) (7600) (5700 7500) (7300) (5900 7100) (6900) (5200 6800) (6400) (6300) (6400) (6400 6800) (6600) (5900 6800) (5600 7100) (6900) (5200 7100) (5900 6800) (6600) (5600 6800) (5200 7100) (6900) (4700 7100) (4400 7600) (7500) (4000 7600) (7100) (6800) (6400) (5200) (5900) (5900) (6100) (5800) (6300) (5700) (6400) (5600) (6600) (5400) (6800) (5200) (7000) (5100) (7100) (4900 7000) (6800) (5100 6600) (5200) (5100 7100) (5400) (5200) (5400 5900) (5100) (4900) (5100) (4700) (4600) (4700) (8300) (4900) (8200) (5100) (8100) (5200) (8000) (5400) (7800) (5600) (7600) (5800) (7500) (5900) (5800 7300) (5600) (5400 7500) (7600) (5900 7500) (7800) (7600) (4700 7800) (7500) (7300) (7500) (7100) (7000) (5600 7100) (7500) (7300) (5900 7500) (8000) (7900) (6300 8000) (7300) (7100) (5500 7300) (7600) (7500) (5800 7600) (8200) (8000) (6300 8200) (7500) (7300) (5600 7500) (8000) (7900) (5900 8000) (8300) (8200) (6300 8300) (7500) (7400) (5100 7500) (8200) (8000) (6300 8200) (7900) (7700) (6100 7900) (7500) (7400) (6000 7400) (8100) (6100) (8000) (6300) (7800) (5600) (7600) (7500) (6100 7600) (7300) (7200) (5900 7300) (7600) (7500) (5800 7600) (8000) (5900) (7800) (6100) (7600) (5400) (7500) (7300) (5900 7500) (7100) (7000) (6300 7100) (7300) (7100) (5500 7300) (7600) (5600) (7500) (5800) (7300) (5100) (7100) (7000) (5600 7100) (6800) (6700) (5900 6800) (6900) (6800) (4900 6900) (7300) (7100) (7300) (6900) (6800) (6100 6900) (7600) (7500) (7600) (6700) (6500) (5800 6700) (7000) (6800) (5500 7000) (5900) (5800) (5600 5900) (6800) (4900 6400) (6100) (5100 5800) (6700) (4400 6800) (6300) (5900) (4400 5600) (5600) (5400) (6400) (5200) (6600) (5100) (6800) (5000) (6900) (4900) (7100) (4700) (7300) (4500) (7500) (4400) (7600) (4200 7500) (7300) (4400 7100) (4500) (4400 7600) (4700) (4500) (4700) (4400 7100) (4200 6900) (4400 7100) (4000 6800) (3900 6600) (4000 6800) (7600) (4200) (7500) (4400) (7400) (4500) (7300) (4700) (7100) (4900) (6900) (5100) (6800) (5200) (5100 6600) (4900) (4700 6800) (6900) (5200 6800) (7100) (6900) (7100) (5900 6800) (5700 6600) (5900 6800) (5600 6400) (5400 6300) (5600 6400) (6100) (6600) (5700) (6900) (5400) (7100) (5700) (5600) (5700 7500) (5400) (5100 7800) (4700) (6300) (5900) (6400) (5600) (6800) (5200) (6900) (5600) (5400) (5600 7300) (5200) (4900 7600) (4500) (6100) (5700) (6600) (5400) (6900) (5100) (7100) (6100) (7300) (5900) (7500) (5700) (7600) (5600) (7300) (5400) (6900) (5200) (5100 7800) (5700) (5600) (5700) (5100) (5000) (5100) (5600) (5400) (5600) (7600) (5700 7500) (7300) (5900 7100) (6900) (5200 6800) (6400) (6300) (6400) (6400 6800) (6600) (5900 6800) (5600 7100) (6900) (5200 7100) (5900 6800) (6600) (5600 6800) (5200 7100) (6900) (4700 7100) (4400 7600) (7500) (4000 7600) (7100) (6800) (6400) (5200))) :lonset (quote (0 208 417 625 833 1042 1250 1458 1667 1875 2083 2292 2500 2708 2917 3125 3333 3542 3646 3750 3958 4062 4167 4375 4479 4583 4792 4896 5000 5208 5417 5625 5833 6042 6250 6458 6667 6875 7083 7292 7500 7708 7917 8125 8333 8542 8646 8750 8958 9062 9167 9375 9479 9583 9792 9896 10000 10208 10417 10625 10833 11042 11250 11458 11562 11667 11875 12083 12292 12500 12708 12917 13125 13333 13542 13750 13958 14062 14167 14375 14583 14792 15000 15208 15417 15625 15833 16042 16250 16458 16667 16875 17083 17292 17500 17708 17917 18125 18333 18542 18750 18958 19062 19167 19375 19479 19583 19792 19896 20000 20208 20417 20625 20833 21042 21250 21458 21562 21667 21875 21979 22083 22292 22396 22500 22708 22812 22917 23125 23229 23333 23542 23646 23750 23958 24167 24375 24583 25000 25208 25417 25625 25833 26042 26250 26458 26667 26875 27083 27292 27500 27708 27917 28125 28333 28542 28646 28750 28958 29062 29167 29375 29479 29583 29792 29896 30000 30208 30417 30625 30833 31042 31250 31458 31667 31875 32083 32292 32500 32708 32917 33125 33333 33542 33646 33750 33958 34062 34167 34375 34479 34583 34792 34896 35000 35208 35417 35625 35833 36042 36250 36458 36562 36667 36875 37083 37292 37500 37708 37917 38125 38333 38542 38750 38958 39062 39167 39375 39583 39792 40000 40208 40417 40625 40833 41042 41250 41458 41667 41875 42083 42292 42500 42708 42917 43125 43333 43542 43750 43958 44062 44167 44375 44479 44583 44792 44896 45000 45208 45417 45625 45833 46042 46250 46458 46562 46667 46875 46979 47083 47292 47396 47500 47708 47812 47917 48125 48229 48333 48542 48646 48750 48958 49167 49375 49583 50000 50208 50417 50625 50833 51042 51250 51458 51667 51875 52083 52292 52500 52708 52917 53125 53333 53542 53646 53750 53958 54062 54167 54375 54479 54583 54792 54896 55000 55208 55417 55625 55833 56042 56250 56458 56667 56875 57083 57292 57500 57708 57917 58125 58333 58542 58646 58750 58958 59062 59167 59375 59479 59583 59792 59896 60000 60208 60312 60417 60625 60729 60833 61042 61146 61250 61458 61562 61667 61875 61979 62083 62292 62396 62500 62708 62812 62917 63125 63229 63333 63542 63646 63750 63958 64062 64167 64375 64479 64583 64792 64896 65000 65208 65417 65625 65833 66042 66250 66458 66562 66667 66875 66979 67083 67292 67396 67500 67708 67917 68125 68333 68542 68750 68958 69062 69167 69375 69479 69583 69792 69896 70000 70208 70417 70625 70833 71042 71250 71458 71562 71667 71875 71979 72083 72292 72396 72500 72708 72812 72917 73125 73229 73333 73542 73646 73750 73958 74062 74167 74375 74479 74583 74792 74896 75000 75208 75417 75625 75833 76042 76250 76458 76667 76875 77083 77292 77500 77708 77917 78125 78333 78542 78750 78958 79167 79375 79583 79792 80000 80208 80417 80625 80833 81042 81146 81250 81458 81562 81667 81875 81979 82083 82292 82396 82500 82708 82917 83125 83333 83542 83750 83958 84167 84375 84583 84792 85000 85208 85417 85625 85833 86042 86146 86250 86458 86562 86667 86875 86979 87083 87292 87396 87500 87708 87917 88125 88333 88542 88750 88958 89062 89167 89375 89583 89792 90000 90208 90417 90625 90833 91042 91250 91458 91562 91667 91875 92083 92292 92500 92708 92917 93125 93333 93542 93750 93958 94167 94375 94583 94792 95000 95208 95417 95625 95833 96042 96250 96458 96562 96667 96875 96979 97083 97292 97396 97500 97708 97917 98125 98333 98542 98750 98958 99062 99167 99375 99479 99583 99792 99896 100000 100208 100312 100417 100625 100729 100833 101042 101146 101250 101458 101667 101875 102083 102500 102708 102917 103125 103333 103542 103750 103958 104167 104375 104583 104792 105000 105208 105417 105625 105833 106042 106146 106250 106458 106562 106667 106875 106979 107083 107292 107396 107500 107708 107917 108125 108333 108542 108750 108958 109167 109375 109583 109792 110000 110208 110417 110625 110833 111042 111146 111250 111458 111562 111667 111875 111979 112083 112292 112396 112500 112708 112812 112917 113125 113229 113333 113542 113646 113750 113958 114062 114167 114375 114479 114583 114792 114896 115000 115208 115312 115417 115625 115729 115833 116042 116146 116250 116458 116562 116667 116875 116979 117083 117292 117396 117500 117708 117917 118125 118333 118542 118750 118958 119062 119167 119375 119479 119583 119792 119896 120000 120208 120417 120625 120833 121042 121250 121458 121562 121667 121875 121979 122083 122292 122396 122500 122708 122917 123125 123333 123542 123750 123958 124062 124167 124375 124479 124583 124792 124896 125000 125208 125312 125417 125625 125729 125833 126042 126146 126250 126458 126562 126667 126875 126979 127083 127292 127396 127500 127708 127917 128125 128333 128542 128750 128958 129167 129375 129583 129792 130000 130208 130417 130625 130833 131042 131250 131458 131667 131875 132083 132292 132500 132708 132917 133125 133333 133542 133646 133750 133958 134062 134167 134375 134479 134583 134792 134896 135000 135208 135417 135625 135833 136042 136250 136458 136667 136875 137083 137292 137500 137708 137917 138125 138333 138542 138646 138750 138958 139062 139167 139375 139479 139583 139792 139896 140000 140208 140417 140625 140833 141042 141250 141458 141562 141667 141875 142083 142292 142500 142708 142917 143125 143333 143542 143750 143958 144062 144167 144375 144583 144792 145000 145208 145417 145625 145833 146042 146250 146458 146667 146875 147083 147292 147500 147708 147917 148125 148333 148542 148750 148958 149062 149167 149375 149479 149583 149792 149896 150000 150208 150417 150625 150833 151042 151250 151458 151562 151667 151875 151979 152083 152292 152396 152500 152714 152821 152929 153143 153250 153357 153571 153679 153786 153994 154203 154411 154619 155453)) :ldur (quote ((417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 417) (209) (208 104) (104) (417 208) (104) (105) (416 208) (104) (104) (209) (104) (104) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (417 208) (209) (104 208) (104) (208 417) (104) (105) (208 416) (104) (104) (209) (104) (104) (417) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (208) (417 209) (416) (417) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (208) (417 209) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 208) (209 104) (105) (208 208) (208 104) (104) (209 209) (208 104) (104) (417 208) (209) (416 208) (208) (417 209) (208) (208 417) (104) (105) (208) (104 208) (104) (209 209) (104 208) (104) (208 417) (104) (105) (208) (104 208) (104) (209 209) (104 208) (104) (833 208) (209) (208) (208) (417) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 417) (209) (208 104) (104) (417 208) (104) (105) (416 208) (104) (104) (209) (104) (104) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (417 208) (209) (104 208) (104) (208 417) (104) (105) (208 416) (104) (104) (209) (104) (104) (417) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (208) (417 209) (416) (417) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (208) (417 209) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 208) (209 104) (105) (208 208) (208 104) (104) (209 209) (208 104) (104) (417 208) (209) (416 208) (208) (417 209) (208) (208 417) (104) (105) (208) (104 208) (104) (209 209) (104 208) (104) (208 417) (104) (105) (208) (104 208) (104) (209 209) (104 208) (104) (833 208) (209) (208) (208) (417) (208) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (417 208) (209) (104 208) (104) (208 417) (104) (105) (208 416) (104) (104) (209) (104) (104) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 417) (209) (208 104) (104) (417 208) (104) (105) (416 208) (104) (104) (209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (208) (104) (104) (834 209) (104) (104) (208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (209) (416 208) (208) (417 209) (208) (417 208) (209) (208) (208 208) (209) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (417 208) (209) (104 208) (104) (208 625) (104) (105) (208) (104 104) (104 104) (209 209) (104 104) (104 104) (417 208) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 417) (209) (208 104) (104) (625 208) (104) (105) (208) (104 104) (104 104) (209 209) (104 104) (104 104) (208 417) (417) (416) (417) (417) (416) (417) (104) (105) (208 416) (208) (209 417) (416) (417) (417) (416) (417) (417) (416) (417) (104) (105) (208 416) (208) (209 417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 1424) (104) (105) (208) (104) (104) (209) (104) (104) (417) (209) (416 208) (208) (417 209) (208) (417 208) (104) (105) (208) (208 104) (104) (209 209) (208 104) (104) (208 208) (209 104) (105) (208 208) (208 104) (104) (209 209) (208 104) (104) (833 208) (209) (208) (208) (417) (208) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (417 208) (209) (104 208) (104) (208 417) (104) (105) (208 416) (104) (104) (209) (104) (104) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 417) (209) (208 104) (104) (417 208) (104) (105) (416 208) (104) (104) (209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (417) (416) (417) (417) (416) (417) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (104) (105) (208) (104) (104) (834 209) (104) (104) (208) (104) (105) (416 208) (104) (104) (417 209) (104) (104) (417 208) (209) (416 208) (208) (417 209) (208) (417 208) (209) (208) (208 208) (209) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (417 208) (209) (104 208) (104) (208 625) (104) (105) (208) (104 104) (104 104) (209 209) (104 104) (104 104) (417 208) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 417) (209) (208 104) (104) (625 208) (104) (105) (208) (104 104) (104 104) (209 209) (104 104) (104 104) (208 417) (417) (416) (417) (417) (416) (417) (104) (105) (208 416) (208) (209 417) (416) (417) (417) (416) (417) (417) (416) (417) (104) (105) (208 416) (208) (209 417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (416) (417) (417) (208) (208 1250) (104) (105) (208) (104) (104) (209) (104) (104) (417) (209) (416 208) (208) (417 209) (208) (417 208) (104) (105) (208) (208 104) (104) (209 209) (208 104) (104) (214 214) (215 107) (108) (214 214) (214 107) (107) (214 214) (215 108) (107) (833 208) (209) (208) (208) (834))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0))) :lchan (quote ((2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2 1) (2) (2) (2) (2) (2) (2) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2) (2) (2 1) (2) (2 1) (2 1) (2) (2 1) (2) (2) (2) (2 1) (2) (2 1) (2 1) (2) (2 1) (1) (1) (1) (2) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2 1) (2) (2) (2) (2) (2) (2) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2) (2) (2 1) (2) (2 1) (2 1) (2) (2 1) (2) (2) (2) (2 1) (2) (2 1) (2 1) (2) (2 1) (1) (1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2 1) (2) (2) (2) (2) (2) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (2 1) (2) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (1) (2) (1) (2) (1) (2) (2) (2 1) (2) (2 1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2) (2 1) (2) (2 1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (1) (1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2 1) (2) (2) (2) (2) (2) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2) (1) (2) (1) (2) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (2 1) (2) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2) (2) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (1) (2) (1) (2) (1) (2) (2) (2 1) (2) (2 1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2) (2 1) (2) (2 1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (1) (2) (2 1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (1) (1) (1) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 922 477) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1066 75) (om-make-point 48 32) 9500 "9500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 344 77) (om-make-point 55 32) 16364 "16364" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 354 45) (quote "computation time grows exponentially with input data size,$watch the 'status' message at bottom left of 'Listener'") "" (om-make-point 423 210) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 112 127) (om-make-point 145 77) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (6400) (6500) (6700) (6900) (7000) (6100) (7000) (6900) (6700) (6500) (6400) (5000 6500) (5200) (5300 6900) (5500) (5700 7400) (5800) (4900 6700) (5800) (5700 7000) (5500) (5300 7600) (5200) (5300 7400) (7600) (5700 7700) (7900) (6200 8100) (8200) (5200 7300) (8200) (5500 8100) (7900) (6100 7700) (7600) (5000 7700) (7400) (6200 7600) (7700) (5300 7900) (8100) (5500 7000) (8100) (5700 7900) (7700) (5800 7600) (7400) (4800 7600) (7200) (6000 7400) (7600) (5200 7700) (7900) (5300 6900) (7900) (5500 7700) (7600) (5700 7400) (7200) (5800 7400) (5500 7600) (5700 7700) (5800 7400) (6000 7600) (6200 7700) (5200 6700) (6200) (6000) (5800) (5700) (5500) (5700 7200) (5300 7400) (5500 7600) (5700 7200) (5800 7400) (6000 7600) (5000 6500) (6000) (5800) (5700) (5500 7000) (5300) (5200) (4800) (5000 6900) (5200) (5300 6700) (5500) (4500 7200) (5500 7000) (5300 6900) (5200 6700) (5000 6500) (4800 6400) (5000 6500) (4600 6700) (4800 6700) (6900) (6700) (3600) (6500) (4100 6500) (4300) (4500 7200) (4600) (4800 7200) (5000) (4000 7200) (7400) (5000 7200) (7400) (4800 7200) (7400) (4600 7200) (7400) (4500 7200) (7400) (4300 7200) (7400) (4500 7200) (7400) (4600 7200) (7400) (4800 7200) (7400) (5000 7200) (7400) (5200 7200) (7400) (5300 7200) (7400) (4300 7200) (7400) (5300 7200) (7400) (5200 7200) (7400) (5000 7200) (7400) (4800 7200) (7400) (4600 7200) (7400) (4500 7200) (4600 7000) (4800 6900) (4500 6700) (4600 6500) (4800 6400) (4200 7200) (6200) (6400) (6600) (6700) (6900) (4300 7000) (4500 6900) (4600 6700) (4300 6500) (4500 6400) (4600 6200) (4000 7000) (6000) (6200) (6400) (6500) (6700) (4100 6900) (7100) (5300 7200) (7400) (5000 7600) (7700) (4700 6800) (7700) (4400 7600) (7400) (4000 7200) (7100) (4500 7200) (4400 7100) (4500 7400) (4700 7200) (4800 7100) (5000 6900) (5200 6800) (5300) (5200 6900) (5300) (5200 6800) (5300) (5200 6600) (5300) (5200 6400) (5300) (5200 6200) (5300) (5200 6000) (5300) (5200 6200) (5300) (5200 6400) (5300) (5200 6600) (5300) (5200 6800) (5300) (5200 6900) (5300) (5200 6200) (5300) (5200 7200) (5300) (5200 7100) (5300) (5200 6900) (5300) (5200 6800) (5300) (5200 6600) (5300) (5200 6400) (5300) (5200 6600) (5300) (5200 6800) (5300) (5200 6900) (5300) (5200 7100) (5300) (5200 7200) (5300) (5200 6600) (5300) (5200 7600) (5300) (5200 7400) (5300) (5200 7200) (5300) (5200 7100) (5300) (5200 6900) (5300) (5200 6800) (6900) (6400 7100) (7200) (6200 7400) (7600) (6000 6900) (7700) (5900 7600) (7400) (5700 7200) (7100) (6200 8100) (8000) (6400 7800) (7600) (6500 8100) (6200) (7400) (6400 7100) (7200) (7100) (5200) (6900) (5700 6900) (4500) (4600) (4800 6900) (5000 7000) (5100 7200) (4200 6200) (5100) (5000 6600) (4800) (4600 6900) (4500) (4300 7000) (6700) (6900) (4300 7000) (4500 7200) (4600 7400) (3600 6400) (7400) (4300 7200) (7000) (4800 6900) (6700) (5300 6900) (5500) (5700 7700) (5900 7600) (6100 7700) (6200) (5200 6700) (6200) (6100 7600) (5900) (5700) (5500) (5300 7400) (7600) (5700 7700) (7900) (6200 8100) (8200) (5200 7300) (8200) (5500 8100) (7900) (6100 7700) (7600) (5000 7700) (5200) (5300 7400) (5500) (5700 6700) (5800) (4900) (5800 7400) (5700 7300) (5500 7600) (5300 6900) (5200 7300) (5300 7400) (5500 7100) (5700 7300) (4500) (7400) (4600 7400) (7200) (7000) (4800 6900) (4600 6700) (4500 6500) (4300 7000) (5800 6100) (5700 6200) (5500 6400) (5300 6500) (5200 6700) (5300 6900) (5500 7400) (5700 6500) (4500 6400) (6200) (3800 6200))) :lonset (quote (0 152 303 455 606 758 909 1061 1212 1364 1515 1667 1818 1970 2121 2273 2424 2576 2727 2879 3030 3182 3333 3485 3636 3788 3939 4091 4242 4394 4545 4697 4848 5000 5152 5303 5455 5606 5758 5909 6061 6212 6364 6515 6667 6818 6970 7121 7273 7424 7576 7727 7879 8030 8182 8333 8485 8636 8788 8939 9091 9242 9394 9545 9697 9848 10000 10152 10303 10455 10606 10758 10909 11061 11212 11364 11515 11667 11818 11970 12121 12273 12424 12576 12727 12879 13030 13182 13333 13485 13636 13788 13939 14091 14242 14394 14545 14697 14848 14924 15000 15152 15303 15455 15606 15758 15909 16061 16212 16364 16439 16515 16591 16667 16742 16818 16894 16970 17045 17121 17197 17273 17348 17424 17500 17576 17652 17727 17803 17879 17955 18030 18106 18182 18258 18333 18409 18485 18561 18636 18712 18788 18864 18939 19015 19091 19242 19394 19545 19697 19848 20000 20152 20303 20455 20606 20758 20909 21061 21212 21364 21515 21667 21818 21970 22121 22273 22424 22576 22727 22879 23030 23182 23333 23485 23636 23788 23939 24091 24242 24394 24545 24697 24848 25000 25152 25303 25455 25530 25606 25682 25758 25833 25909 25985 26061 26136 26212 26288 26364 26439 26515 26591 26667 26742 26818 26894 26970 27045 27121 27197 27273 27349 27424 27500 27576 27652 27727 27803 27879 27955 28030 28106 28182 28258 28333 28409 28485 28561 28636 28712 28788 28864 28939 29015 29091 29167 29242 29318 29394 29470 29545 29621 29697 29773 29849 29924 30000 30152 30303 30455 30606 30758 30909 31061 31212 31364 31515 31667 31818 31970 32121 32273 32424 32727 32879 33030 33106 33182 33333 33485 33636 33788 33939 34091 34242 34394 34545 34697 34849 35000 35152 35303 35455 35606 35758 35909 36061 36212 36364 36515 36667 36818 36970 37121 37273 37424 37576 37727 37879 38030 38182 38333 38485 38636 38788 38939 39091 39242 39394 39545 39697 39849 40000 40152 40303 40455 40606 40758 40909 41061 41212 41364 41515 41667 41818 41970 42121 42273 42424 42576 42727 42879 43030 43333 43485 43636 43788 43939 44091 44242 44394 44545 44697 44849 45000 45152 45303 45455 45606 45758 46061 46212 46364 48182)) :ldur (quote ((152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152) (151) (152 303) (151) (152 303) (151) (152 303) (151) (152 303) (151) (152 303) (151) (152 303) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (304 152) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (303 151) (152) (151 151) (152 152) (151 151) (152 152) (151 151) (152 152) (152 303) (151) (152) (151) (152) (151) (152 152) (151 151) (152 152) (151 151) (152 152) (151 151) (152 303) (151) (152) (151) (152 606) (151) (152) (151) (152 303) (151) (152 303) (151) (152 152) (151 151) (152 152) (151 151) (152 152) (151 151) (152 152) (151 151) (304 76) (76) (303) (303) (152) (151 303) (152) (151 303) (152) (151 303) (152) (151 75) (84) (152 83) (83) (151 83) (84) (152 84) (83) (151 83) (84) (152 84) (83) (151 83) (84) (152 84) (83) (151 83) (83) (152 84) (83) (151 83) (83) (152 84) (83) (151 83) (83) (152 84) (83) (151 83) (83) (152 84) (83) (151 83) (83) (152 84) (83) (151 151) (152 152) (151 151) (152 152) (151 151) (152 152) (303 152) (151) (152) (151) (152) (151) (152 152) (151 151) (152 152) (151 151) (152 152) (151 151) (303 152) (151) (152) (151) (152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (152 152) (151 151) (152 152) (152 152) (151 151) (152 152) (75 151) (84) (83 152) (83) (83 151) (84) (83 152) (83) (83 151) (84) (83 152) (83) (83 151) (84) (84 152) (83) (83 151) (84) (84 152) (83) (83 151) (84) (84 152) (83) (83 151) (83) (84 152) (83) (83 151) (83) (84 152) (83) (83 151) (83) (84 152) (83) (83 151) (83) (84 152) (83) (83 151) (83) (84 152) (83) (83 151) (83) (84 152) (84) (83 151) (83) (84 152) (84) (83 151) (83) (84 152) (84) (83 152) (83) (83 151) (84) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (303 455) (303) (151) (303 76) (76) (303) (303) (151) (152 455) (151) (152) (151 151) (152 152) (151 151) (152 304) (152) (151 303) (152) (151 303) (152) (454 151) (152) (151) (152 152) (151 151) (152 152) (303 151) (152) (303 151) (152) (303 151) (152) (151 303) (152) (151 151) (152 152) (151 303) (152) (151 303) (152) (151 303) (152) (151) (152) (303 151) (152) (303 151) (152) (303 152) (151) (303 152) (151) (303 152) (151) (303 152) (151) (152 303) (151) (152 303) (151) (152 455) (151) (152) (151 151) (152 152) (151 151) (152 152) (151 151) (152 152) (151 151) (303 455) (303) (151) (455 152) (151) (152) (151 151) (152 152) (151 151) (152 152) (152 152) (151 151) (152 152) (151 151) (152 152) (151 151) (152 152) (303 303) (303 151) (152) (1818 1818))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (2) (2) (2) (2) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (2) (2) (2 1) (2) (2) (2) (2 1) (2) (2 1) (2) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (1) (2) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (1) (2 1) (1) (1) (2) (1) (2 1) (2) (2) (2 1) (2 1) (2 1) (2 1) (2) (2 1) (2) (2 1) (2) (2 1) (1) (1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2 1) (2 1) (2) (2 1) (2) (2 1) (2) (2) (2) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2) (2 1) (2) (2 1) (2) (2) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2) (1) (2 1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (2 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 390 38) (quote "stream segregation - Bach inventions #4 and #6") "" (om-make-point 314 34) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" nil) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 1))) (om-make-point 286 124) (om-make-point 84 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 377 200) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 334 202) (om-make-point 41 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CS-SEGREGATE-STREAMS" (quote cs-segregate-streams) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "CS" nil) (om-load-inputfun (quote input-funbox) "time-weight (1)" "TIME-WEIGHT" 1) (om-load-inputfun (quote input-funbox) "pitch-weight (1)" "PITCH-WEIGHT" 1))) (om-make-point 274 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 358 75) (quote "make sure to use a smaller than default (100 ms),$value for *global-deltachords* (\"Delta chords\" in prefs)$when importing midi-files to have the trills included$as separate notes.  Try using 0.") "" (om-make-point 94 493) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 11.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "invent4.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 120 44) (om-make-point 50 72) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "andersvi" "Musikk" "MIDIFILER" "BACH" "bach" "invent")) :device nil :host nil :name "invent4" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "invent4.mid") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport player winpos winsize deltapict zoom obj-mode cmnpref notechancolor? grillestep mode show-stems scale)) (list 0 (quote :midi-player) (om-make-point 0 0) (om-make-point 913 443) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (quote t) nil)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 89 312) (om-make-point 679 155) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (4800) (5000) (5300) (5200) (5500) (4600) (4800) (4100) (4300) (4500) (4600) (4800) (5000) (3600) (4500) (5300) (5200) (5500) (5800) (5700) (6000) (4800) (5000) (5200) (5300) (5500) (5000) (7200) (7400) (7600) (7200) (7400) (7600) (5300) (5500) (5700) (5800) (4800) (6200) (5700) (5800) (5500) (6000) (6200) (5200) (5300) (5500) (5700) (5800) (6700) (6000) (5300) (5200) (5300) (5500) (5800) (5700) (5700) (6200) (4900) (5200) (5300) (5000) (5500) (5700) (5800) (5200) (5500) (6100) (5000))) :lonset (quote (14242 14394 14545 13939 14091 13788 14697 14848 15455 15606 15758 15909 16061 16212 15152 13636 12576 12727 12424 12121 12273 11970 12879 13030 13182 13333 13485 11818 10909 11061 11212 11364 11515 11667 6061 6364 6667 6970 7273 5758 9394 9545 9242 9697 9848 7879 8182 8485 8788 9091 10000 7576 3333 3485 3636 3182 2879 3030 3939 4242 2727 1970 2121 1818 2273 2424 2576 4545 4848 5152 5455 16364)) :ldur (quote ((152) (151) (152) (152) (151) (151) (151) (304) (151) (152) (151) (152) (151) (152) (303) (152) (151) (152) (152) (152) (151) (151) (151) (152) (151) (152) (151) (152) (152) (151) (152) (151) (152) (151) (303) (303) (303) (303) (303) (303) (151) (152) (152) (151) (152) (303) (303) (303) (303) (151) (303) (303) (152) (151) (303) (151) (151) (152) (303) (303) (152) (151) (152) (152) (151) (152) (151) (303) (304) (303) (303))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7600) (7400) (7600) (7900) (8100) (7200) (7400) (7600) (7700) (7900) (6900) (7400) (7200) (7400) (7600) (7700) (7700) (7600) (7900) (7600) (7700) (7400) (7000) (6700) (7000) (7600) (7700) (7400) (7600) (7900) (8100) (8200) (6500) (6400) (6500) (6700) (7000) (6900) (6900) (7400) (6100) (6400) (6500) (6200) (6700) (6900) (7000) (7300) (7600) (7700) (7400) (7900) (8100) (7700) (7600) (7700) (7900) (8200) (8100) (5800) (5700) (5500) (5700) (6000) (6200) (5300) (5500) (5700) (5800) (6000) (6500) (5200) (6500) (6500) (6700) (6900) (6500) (6400) (6500) (6700) (6700) (6700) (7000) (6900) (7200) (7000) (6900) (6700) (7200) (7200))) :lonset (quote (6818 6970 7121 7273 6667 6515 7424 7576 7727 7879 8030 8182 8788 8939 9091 9242 9394 8485 8636 8333 9697 9848 9545 6364 2727 3030 3788 3939 3636 3333 4091 4242 4394 1515 1667 1818 1364 1061 1212 2121 2424 909 152 303 0 455 606 758 4545 5758 5909 5606 6061 6212 5152 5303 5455 5000 4697 4848 10455 10606 10758 10909 10303 10152 11061 11212 11364 11515 11667 11818 10000 15303 15455 15000 14924 14242 14394 14545 14697 14848 14091 13788 13939 13636 12424 13030 13333 15758 16061 16364)) :ldur (quotelvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote f) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 159/50 nil 1000 0 (om-make-point 1318 504) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (5 0 1 0 nil 0) (2 0 1 1 nil 0) (3 0 1 2 nil 0) (6 0 5 0 nil 0) (7 0 5 2 nil 0) (4 0 6 0 nil 0) (17 0 10 0 nil 0) (10 0 12 0 nil 0) (8 0 12 2 nil 0) (12 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (15 0 18 1 nil 0))) nil 6.120003))
