; OM File Header - Saved 2017/04/27 15:01:26
; (6.120003 :patc (om-make-point 10 10) (om-make-point 0 0) (om-make-point 879 600) "" 183 0 nil "2017/04/27 15:00:17")
; End File Header
; External resources 
; (list (list (quote :midi) "#P\"../../../../../../../Musikk/MIDIFILER/BACH/bach/invent/invent1.mid\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Bach invention" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 324 38) (quote "stream segregation - Bach invention #1") nil (om-make-point 314 34) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 94) (om-make-point 55 32) 16744 "16744" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SELECT" (quote select) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" nil) (om-load-inputfun (quote input-funbox) "an integer" "START" 0) (om-load-inputfun (quote input-funbox) "an integer" "END" 1))) (om-make-point 286 124) (om-make-point 84 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 366 202) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 334 202) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CS-SEGREGATE-STREAMS" (quote cs-segregate-streams) (quote ((om-load-inputfun (quote input-funbox) "chord-seq" "CS" nil) (om-load-inputfun (quote input-funbox) "time-weight (1)" "TIME-WEIGHT" 1) (om-load-inputfun (quote input-funbox) "pitch-weight (1)" "PITCH-WEIGHT" 1))) (om-make-point 274 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 374 60) (quote "make sure to use a smaller than default (100 ms)$value for *global-deltachords* (\"Delta chords\" in prefs) to$have the trills included as separate notes") nil (om-make-point 405 114) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 11.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "invent1.mid" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 120 44) (om-make-point 78 76) (let ((newobj (load-midi (om-make-pathname :directory (quote (:absolute "home" "andersvi" "Musikk" "MIDIFILER" "BACH" "bach" "invent")) :device nil :host nil :name "invent1" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "invent1.mid") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport player winpos winsize deltapict zoom obj-mode cmnpref notechancolor? grillestep mode show-stems scale)) (list 0 (quote :midi-player) (om-make-point 0 0) (om-make-point 913 443) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (quote t) nil)) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 89 312) (om-make-point 667 186) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (5000) (5200) (5300) (5000) (5200) (4800) (5500) (4300) (5500) (5700) (5900) (6000) (5700) (5900) (5500) (6000) (5900) (6000) (6200) (6400) (5500) (5700) (5900) (6000) (5200) (5400) (5500) (5700) (5900) (6000) (5000) (5200) (5400) (5500) (5200) (5400) (5000) (5500) (4700) (4800) (5000) (5200) (5400) (5500) (5200) (4700) (4800) (5000) (3800))) :lonset (quote (1570 1744 1919 2093 2267 2442 2616 2791 3140 4360 4535 4709 4884 5058 5233 5407 5581 5930 6279 6628 6977 7326 7674 8023 8372 8721 9070 9419 9767 10116 10465 11337 11512 11686 11860 12035 12209 12384 12558 12907 13256 13605 13953 14302 14651 15000 15349 15872 16047 16395 16744)) :ldur (quote ((174) (175) (174) (174) (175) (174) (175) (349) (348) (175) (174) (175) (174) (175) (174) (174) (349) (349) (349) (349) (349) (348) (349) (349) (349) (349) (349) (348) (349) (349) (843) (175) (174) (174) (175) (174) (175) (174) (349) (349) (349) (348) (349) (349) (349) (349) (523) (175) (348) (349))) :lvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6500) (6200) (6400) (6000) (6700) (7200) (7100) (6900) (7100) (7200) (7400) (6700) (6900) (7100) (7200) (6900) (7100) (6700) (7400) (7900) (7700) (7600) (7700) (7900) (7600) (8100) (7900) (7700) (7600) (7900) (7700) (8100) (7900) (7700) (7600) (7400) (7200) (7600) (7400) (7700) (7600) (7400) (7200) (7100) (6900) (7200) (7100) (7400) (7200) (7100) (6900) (6700) (6600) (6900) (6700) (7100) (6900) (6200) (7200) (7100) (7200) (7400) (7100) (6900) (6700) (6600) (6400) (6700) (6600) (6900) (6700) (7100) (6900) (7200) (7100) (7400) (7200) (7600) (7400) (7100) (7200) (7400) (7900) (7100) (7200) (7100) (6900) (6700))) :lonset (quote (174 349 523 698 872 1047 1221 1395 1744 2093 2180 2267 2442 2791 2965 3140 3314 3488 3663 3837 4012 4186 4535 4884 4971 5058 5233 5581 5756 5930 6105 6279 6453 6628 6802 6977 7151 7326 7500 7674 7849 8023 8198 8372 8547 8721 8895 9070 9244 9419 9593 9767 9942 10116 10291 10465 10640 10814 10988 11163 11512 11860 11948 12035 12384 12558 12733 12907 13081 13256 13430 13605 13779 13953 14128 14302 14477 14651 14826 15000 15174 15349 15523 15610 15698 15872 16047 16134 16221 16395 16570 16744)) :ldur (quotelvel (quote ((64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (64) (56) (64) (64) (64) (56) (64) (64) (64))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (list (quote f) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (3 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 22/25 nil 1000 0 (om-make-point 1318 504) (om-make-point 0 0) 0 3 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 2 0 nil 0) (1 0 2 2 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (5 0 8 1 nil 0))) nil 6.120003))
